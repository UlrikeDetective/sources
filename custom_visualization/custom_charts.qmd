---
title: "Chart themes"
format: html
editor: visual
---

## Charts

## 

```{r}
# Load necessary libraries
install.packages("ggplot2")
library(ggplot2)

```

```{r}
# Example data
categories <- c("Category 1", "Category 2", "Category 3")
values <- c(20, 35, 15)

# Create a data frame
data <- data.frame(Category = categories, Value = values)
```

**Bar chart**

```{r}
library(ggplot2)

ggplot(data, aes(x = Category, y = Value, fill = Category)) +
  geom_bar(stat = "identity") +
  labs(
    title = "Most reported layoffs in Australia by Location HQ (counted)",
    subtitle = "Bar plot of country counts",
    fill = "Category"
  ) +
  scale_fill_manual(values = my_palette_custom_all) +
  coord_flip() +
  custom_theme_black_nolegend() 
```

**Pie chart:**

```{r}

# Create a pie chart using ggplot2 and apply the custom theme
ggplot(data, aes(x = "", y = Value, fill = Category)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  custom_theme_white_nolegend() + 
  labs(title = "Pie Chart with Custom Theme", fill = "Category") +
  scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
  theme(legend.title = element_blank())

```

**Donut chart:**

```{r}

# Create a donut chart using ggplot2
ggplot(data, aes(x = 1, y = Value, fill = Category)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  coord_polar("y", start = 0) +
  scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
  custom_theme_white_nolegend() +
  labs(title = "Donut Chart with Custom Theme", fill = "Category") +
  theme(legend.title = element_blank()) +
  theme_void()

# Create a white circle in the center to simulate a donut hole
donut_chart <- donut_chart +
  geom_rect(xmin = 0.5, xmax = 1.5, ymin = 0.5, ymax = 1.5, 
            fill = "white", color = "white", alpha = 1)

```

**Line chart:**

```{r}
ggplot(data, aes(x = Category, y = Value, group = 1)) +
  geom_line(color = "blue", size = 1) +  # Adjust color and size as needed
  geom_point(color = "blue", size = 3) +  # Add points for each data point
  custom_theme_white_nolegend() +
  labs(title = "Line Chart with Custom Theme", x = "Category", y = "Value") +
  scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
  theme(legend.title = element_blank()) +
  theme_minimal() 
```

**Box plot:**

```{r}
ggplot(data, aes(x = Category, y = Value, fill = Category)) +
  geom_boxplot() +
  custom_theme_white_nolegend() +
  labs(title = "Boxplot with Custom Theme", x = "Category", y = "Value") +
  scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
  theme(legend.title = element_blank()) +
  theme_minimal()
```

**Scatter plot:**

```{r}
ggplot(data, aes(x = Category, y = Value, color = Category)) +
  geom_point(size = 4) +
  custom_theme_white_nolegend() +
  labs(title = "Scatter Plot with Custom Theme", x = "Category", y = "Value") +
  scale_color_manual(values = my_palette_Blue2DarkRed18Steps) +
  theme(legend.title = element_blank()) +
  theme_minimal() 
```

**Histogram:**

```{r}
ggplot(data, aes(x = Value, fill = Category)) +
  geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
  custom_theme_white_nolegend() +
  labs(title = "Histogram with Custom Theme", x = "Value", y = "Frequency") +
  scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
  theme(legend.title = element_blank()) +
  theme_minimal()  
```

**Bubble chart:**

```{r}
# Additional variable for bubble sizes
bubble_sizes <- c(5, 10, 15)  # Modify these sizes as needed

# Create a data frame
data_bubble <- data.frame(Category = categories, Value = values, Size = bubble_sizes)

# Create a bubble chart using ggplot2
ggplot(data_bubble, aes(x = Category, y = Value, size = Size, color = Category)) +
  geom_point(alpha = 0.7) +
  custom_theme_white_nolegend() +
  labs(title = "Bubble Chart with Custom Theme", x = "Category", y = "Value", size = "Size") +
  scale_color_manual(values = my_palette_Blue2DarkRed18Steps) +
  theme(legend.title = element_blank()) +
  theme_minimal() 
```

**Correlogram**

```{r}
install.packages("GGally")

library(GGally)

# Create a correlogram using GGally
correlogram <- ggpairs(data, 
                       columns = c("Category", "Value"),
                       mapping = aes(color = Category),
                       upper = list(continuous = "points"),
                       lower = list(continuous = "smooth"),
                       diag = list(continuous = "barDiag"),
                       axisLabels = "internal",
                       title = "Correlogram")

# Display the correlogram
correlogram
```

**Heatmap**

```{r}
install.packages("reshape2")
library(reshape2)  # For data manipulation
```

```{r}

# Example data
categories_heatmap <- c("Category 1", "Category 2", "Category 3")
values_heatmap <- c(20, 35, 15)

# Create a data frame
data_heatmap <- data.frame(Category = categories_heatmap, Value = values_heatmap)

# Create a heatmap using ggplot2
heatmap_plot <- ggplot(data_heatmap, aes(x = Category, y = Category, fill = Value)) +
  geom_tile() +
  scale_fill_viridis_c() +  # You can choose a different color palette
  labs(title = "Heatmap", x = "Category", y = "Category") +
  theme_minimal()

# Display the heatmap
heatmap_plot
```

**Ridgeline:**

```{r}
install.packages("ggridges")
library(ggridges)
```

```{r}
# Create a ridgeline plot using ggridges
ggplot(data, aes(x = Value, y = Category, fill = Category)) +
  geom_density_ridges(alpha = 0.7, scale = 1.5) +
  scale_fill_viridis_d() +  # You can choose a different color palette
  labs(title = "Ridgeline Plot", x = "Value", y = "Category") +
  theme_minimal()

```

**Density**

```{r}
ggplot(data, aes(x = Value, fill = Category)) +
  geom_density(alpha = 0.7) +
  scale_fill_viridis_d() +  # You can choose a different color palette
  labs(title = "Density Plot", x = "Value", y = "Density") +
  theme_minimal()
```

**Spider / Radar**

```{r}
library(dplyr)
library(tidyr)
```

```{r}
# Normalize values between 0 and 1 for the radar plot
data <- data %>% mutate(Normalized = (Value - min(Value)) / (max(Value) - min(Value)))

# Create a radar plot using ggplot2
ggplot(data, aes(x = Category, y = Normalized, group = 1)) +
  geom_polygon(aes(fill = Category), alpha = 0.5) +
  geom_line(aes(color = Category)) +
  scale_fill_viridis_d() +
  scale_color_viridis_d() +
  labs(title = "Radar Plot", x = NULL, y = NULL) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 0.5),
    legend.position = "none"
  )

```

Lolli**pop chart:**

```{r}
ggplot(data, aes(x = Category, y = Value)) +
  geom_segment(aes(xend = Category, yend = 0), color = "skyblue", size = 2) +
  geom_point(color = "blue", size = 3) +
  labs(title = "Lollipop Chart", x = "Category", y = "Value") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
```

**Circular Barplot**

```{r}
ggplot(data, aes(x = "", y = Value, fill = Category)) +
  geom_bar(stat = "identity", width = 1, color = "black") +
  coord_polar("y", start = 0) +
  labs(title = "Circular Barplot", fill = "Category") +
  scale_fill_viridis_d() +
  theme_minimal() +
  theme(axis.text.x = element_blank())
```

**Parallel chart**

```{r}

```

```{r}
# Example data
categories_parallel <- c("Category 1", "Category 2", "Category 3")
values1 <- c(20, 35, 15)
values2 <- c(30, 25, 10)
values3 <- c(15, 20, 25)

# Create a data frame
data_parallel <- data.frame(Category = categories_parallel, Value1 = values1, Value2 = values2, Value3 = values3)

# Transform data to long format for parallel plot
data_long <- tidyr::pivot_longer(data_parallel, cols = starts_with("Value"), names_to = "Variable", values_to = "Value")

# Create a parallel coordinate plot using ggplot2
parallel_plot <- ggplot(data_long, aes(x = Variable, y = Value, group = Category, color = Category)) +
  geom_path(alpha = 0.5, size = 1) +
  labs(title = "Parallel Coordinate Plot") +
  scale_color_viridis_d() +
  theme_minimal()

# Display the parallel coordinate plot
parallel_plot
```

**Wordcloud**

```{r}
# Load necessary libraries
library(wordcloud)

# Example data (random text for demonstration)
set.seed(123)
text_data <- paste(sample(LETTERS, 100, replace = TRUE), collapse = " ")

# Create a word cloud
wordcloud(words = names(table(strsplit(text_data, " ")[[1]])), 
          freq = as.numeric(table(strsplit(text_data, " ")[[1]])),
          min.freq = 1,
          scale = c(3, 0.5),
          colors = brewer.pal(8, "Dark2"),
          random.order = FALSE,
          rot.per = 0.35,
          use.r.layout = FALSE,
          max.words = 100,
          random.color = TRUE,
          title = "Word Cloud Example")
```

**Table chart**

```{r}
install.packages("kableExtra")
# Load necessary libraries
library(kableExtra)
```

```{r}
# Load necessary libraries
library(kableExtra)

# Example data
categories <- c("Category 1", "Category 2", "Category 3")
values <- c(20, 35, 15)

# Create a data frame
data <- data.frame(Category = categories, Value = values)

# Render data as a table using kableExtra
table <- data %>%
  kable("html") %>%
  kable_styling(full_width = FALSE)

# Display the table
table
```
