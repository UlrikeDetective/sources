ted_new$speakers3 <- sub("@.*", "", ted_new$speakers3)
# Print the result
head(ted_new)
# Get unique entries in the "speakers" column
unique_speakers3 <- unique(ted_new$speakers3)
# Print the list of unique speakers
print(unique_speakers3)
# get the title form the column videoTitle
library(stringr)
# Extract title from videoTitle
ted_new$title <- str_extract(ted_new$videoTitle, "^[^|]+")
# Print the result
head(ted_new)
skim(ted_new)
# Get unique entries in the "speakers" column
unique_speakers3 <- unique(ted_new$speakers3)
# Print the list of unique speakers
#print(unique_speakers3)
# Assuming 'ted_new' is your dataframe
ted_new$title <- sub("@.*", "", ted_new$title)
# Print the result
head(ted_new)
unique_title <- unique(ted_new$title)
unique_title <- unique(ted_new$title)
unique_title
unique_title <- unique(ted_new$title)
#unique_title
# Remove ":" at the end of entries in the "speakers2" column
ted_new$speakers2 <- sub(":$", "", ted_new$speakers2)
# Print the updated dataframe
head(ted_new)
# Combine "speakers1" and "speakers2" columns into a new column "speaker"
ted_new$speaker <- ifelse(is.na(ted_new$speakers1), ted_new$speakers2,
ifelse(is.na(ted_new$speakers2), ted_new$speakers1,
paste(ted_new$speakers1, ted_new$speakers2, sep = "")))
# Print the updated dataframe
head(ted_new)
# Assuming 'ted_new' is your dataframe
ted_new$speaker_new <- ifelse(ted_new$speaker == ted_new$speakers3 & !is.na(ted_new$speaker),
ted_new$speaker,
ifelse(is.na(ted_new$speaker) & !is.na(ted_new$speakers3),
ted_new$speakers3,
ifelse(is.na(ted_new$speaker) & is.na(ted_new$speakers3),
NA,
ted_new$speaker)))
# Print the updated dataframe
head(ted_new)
# Create new column speaker_new based on conditions
ted_new$speaker_new <- ifelse(ted_new$speaker == ted_new$speakers3 & !is.na(ted_new$speaker),
ted_new$speaker,
ifelse(is.na(ted_new$speaker),
ted_new$speakers3,
ifelse(is.na(ted_new$speakers3),
ted_new$speaker,
NA)))
# Print the updated dataframe
head(ted_new)
# Create a new column "speaker_new" based on conditions
ted_new$speaker_new <- ifelse(!is.na(ted_new$speaker) & ted_new$speaker == ted_new$speakers3,
ted_new$speaker,
ifelse(is.na(ted_new$speaker) & !is.na(ted_new$speakers3),
ted_new$speakers3,
ifelse(is.na(ted_new$speakers3),
ted_new$speaker,
NA)))
# Print the result
head(ted_new)
ted_new <- ted_new[, !colnames(ted_new) %in% c("speakers1", "speakers2")]
head(ted_new)
skim(ted_new)
# Save the dataframe as a CSV file
write.csv(ted_new, "youtube_ted_new_2024_03_17.csv", row.names = FALSE)
ted <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_ted_new2024_03_17.csv")
library(tidyverse)
library(dplyr)
library(knitr)
library(skimr)
library(tidyverse)
library(dplyr)
library(knitr)
library(skimr)
ted <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_ted_new2024_03_17.csv")
ted <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_ted_new_2024_03_17.csv")
ted <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_ted_new_2024_03_17.csv")
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_ted_new_2024_03_17.csv")
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_ted_cleaned_2024_03_17")
library(tidyverse)
library(dplyr)
library(knitr)
library(skimr)
ted_new <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_ted_2024_03_17-08_20_11.csv")
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_ted_cleaned_2024_03_17")
library(tidyverse)
library(dplyr)
library(knitr)
library(skimr)
ted_new <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_ted_2024_03_17-08_20_11.csv")
# Assuming 'ted_new' is your dataframe
ted_new <- ted_new[, !colnames(ted_new) %in% c("channelId", "publishedAt", "position", "duration", "dimension", "definition", "defaultLanguage", "thumbnail_maxres", "licensedContent", "locationDescription", "latitude", "longitude", "dislikeCount", "favoriteCount" )]
head(ted_new)
colnames(ted_new)
skim(ted_new)
# Subset of publishedAtSQL into date and time
# Assuming 'ted_new' is your dataframe
ted_new$release_date <- substr(ted_new$publishedAtSQL, 1, 10)  # Extract yyyy-mm-dd
ted_new$release_time <- substr(ted_new$publishedAtSQL, 12, 19) # Extract hh:mm:ss
# Convert release_date and release_time to appropriate formats
ted_new$release_date <- as.Date(ted_new$release_date)
ted_new$release_time <- as.POSIXct(ted_new$release_time, format = "%H:%M:%S")
# Remove the original publishedAtSQL column if no longer needed
# ted_new <- ted_new[, !colnames(ted_new) %in% "publishedAtSQL"]
# Extract time portion from release_time column
ted_new$release_time <- format(ted_new$release_time, "%H:%M:%S")
# Check the dataframe
head(ted_new)
# Convert duration in seconds to minutes and seconds format
ted_new$duration <- sprintf("%02d:%02d", ted_new$durationSec %/% 60, ted_new$durationSec %% 60)
# Check the dataframe
head(ted_new)
# remove column durationSec
ted_new <- ted_new[, !colnames(ted_new) %in% c("durationSec", "publishedAtSQL")]
head(ted_new)
skim(ted_new)
library(stringr)
# Assuming 'ted_new' is your dataframe
ted_new$speakers1 <- str_extract(ted_new$videoTitle, "(?<=\\| ).*?(?= \\|| @|^)")
# Print the result
head(ted_new)
library(stringr)
# Assuming 'ted_new' is your dataframe
ted_new$speakers2 <- str_extract(ted_new$videoTitle, "^(.*?):")
# Print the result
head(ted_new)
# Assuming 'ted_new' is your dataframe
ted_new$speakers3 <- sub(".*\\|\\s*", "", ted_new$videoTitle)
# Replace "TED" with NA in the "speakers3" column
ted_new$speakers3 <- ifelse(ted_new$speakers3 == "TED", NA, ted_new$speakers3)
# Print the result
head(ted_new)
# Assuming 'ted_new' is your dataframe
ted_new$speakers3 <- sub("@.*", "", ted_new$speakers3)
# Print the result
head(ted_new)
# Count NA values in the "speakers" column
na_count_speakers1 <- sum(is.na(ted_new$speakers1))
# Print the number of NA values
print(na_count_speakers1)
# get the title form the column videoTitle
library(stringr)
# Extract title from videoTitle
ted_new$title <- str_extract(ted_new$videoTitle, "^[^|]+")
# Print the result
head(ted_new)
skim(ted_new)
# Assuming 'ted_new' is your dataframe
ted_new$title <- sub("@.*", "", ted_new$title)
# Print the result
head(ted_new)
ted_new <- ted_new[, !colnames(ted_new) %in% c("speakers")]
head(ted_new)
skim(ted_new)
# Remove ":" at the end of entries in the "speakers2" column
ted_new$speakers2 <- sub(":$", "", ted_new$speakers2)
# Print the updated dataframe
head(ted_new)
# Combine "speakers1" and "speakers2" columns into a new column "speaker"
ted_new$speaker <- ifelse(is.na(ted_new$speakers1), ted_new$speakers2,
ifelse(is.na(ted_new$speakers2), ted_new$speakers1,
paste(ted_new$speakers1, ted_new$speakers2, sep = "")))
# Print the updated dataframe
head(ted_new)
# Save the dataframe as a CSV file
write.csv(ted_new, "youtube_ted_new2_2024_03_17.csv", row.names = FALSE)
# Save the dataframe as a CSV file
write.csv(ted_new, "youtube_ted_new2_2024_03_17.csv", row.names = FALSE)
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube_ted_new2_2024_03_17")
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube_ted_new2_2024_03_17", encoding = "UTF-8")
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/Youtube/youtube_ted_new2_2024_03_17", encoding = "UTF-8")
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/Youtube/youtube_ted_new2_2024_03_17")
library(tidyverse)
library(dplyr)
library(knitr)
library(skimr)
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/Youtube/youtube_ted_new2_2024_03_17", encoding = "UTF-8")
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/Youtube/youtube_ted_new2_2024_03_17")
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/Youtube/youtube_ted_new2_2024_03_17.csv", encoding = "UTF-8")
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/Youtube/youtube_ted_new2_2024_03_17.csv", encoding = "UTF-8")
ted_new <- ted_new[, !colnames(ted_new) %in% c("speaker_new")]
# Check if entries in "speaker" and "speakers3" are the same
same_speaker <- ted_new$speaker == ted_new$speakers3
# Remove entry in "speakers3" where entries are the same
ted_new$speakers3[same_speaker] <- NA
head(ted_new)
# Check if entries in "speaker" and "speakers3" are the same
same_speaker <- ted_new$speaker == ted_new$speakers3
head(same_speaker)
# Remove entry in "speakers3" where entries are the same
#ted_new$speakers3[same_speaker] <- NA
#head(ted_new)
# Trim leading and trailing whitespace from "speaker" and "speakers3" columns
ted_new$speaker <- trimws(ted_new$speaker)
ted_new$speakers3 <- trimws(ted_new$speakers3)
# Check if entries in "speaker" and "speakers3" are the same
same_speaker <- ted_new$speaker == ted_new$speakers3
# Output the first few rows of the comparison
head(same_speaker)
# Remove entry in "speakers3" where entries are the same
#ted_new$speakers3[same_speaker] <- NA
#head(ted_new)
# Trim leading and trailing whitespace from "speaker" and "speakers3" columns
ted_new$speaker <- trimws(ted_new$speaker)
ted_new$speakers3 <- trimws(ted_new$speakers3)
# Check if entries in "speaker" and "speakers3" are the same
same_speaker <- ted_new$speaker == ted_new$speakers3
# Output the first few rows of the comparison
same_speaker
# Remove entry in "speakers3" where entries are the same
#ted_new$speakers3[same_speaker] <- NA
#head(ted_new)
# Trim leading and trailing whitespace from "speaker" and "speakers3" columns
ted_new$speaker <- trimws(ted_new$speaker)
ted_new$speakers3 <- trimws(ted_new$speakers3)
# Check if entries in "speaker" and "speakers3" are the same
same_speaker <- ted_new$speaker == ted_new$speakers3
# Output the first few rows of the comparison
# same_speaker
# Remove entry in "speakers3" where entries are the same
ted_new$speakers3[same_speaker] <- NA
head(ted_new)
# Find rows where "speaker" is NA and "speakers3" is not NA
na_speaker_index <- is.na(ted_new$speaker) & !is.na(ted_new$speakers3)
# Replace NA values in "speaker" with corresponding values from "speakers3"
ted_new$speaker[na_speaker_index] <- ted_new$speakers3[na_speaker_index]
# Check the first 100 rows
head(ted_new, 100)
# Save the dataframe as a CSV file
write.csv(ted_new, "youtube_ted_new3_2024_03_17.csv", row.names = FALSE)
# Count NA values in the "speakers" column
na_count_speaker <- sum(is.na(ted_new$speaker))
# Print the number of NA values
print(na_count_speaker)
# Create a logical vector indicating entries in "speaker" with only one word
one_word_speaker <- grepl("^\\S+$", ted_new$speaker)
# Subset the dataframe to include only rows with one-word entries in "speaker"
one_word_entries <- ted_new[one_word_speaker, "speaker", drop = FALSE]
# Display the one-word entries
print(one_word_entries)
# Define the row numbers and corresponding speaker names to replace
rows_to_replace <- c(45, 185, 298:305)
new_speaker_name <- "TED"
# Replace the specified entries with "TED"
ted_new$speaker[rows_to_replace] <- new_speaker_name
# Check the modified entries
ted_new[rows_to_replace, "speaker"]
# Define the row numbers and corresponding speaker names to replace
rows_to_replace <- c(45, 185, 298:306, 308, 315, 317:321, 327:333, 337, 339, 344, 346, 350, 354, 362:376, 384,539,622, 657)
new_speaker_name <- "TED"
# Replace the specified entries with "TED"
ted_new$speaker[rows_to_replace] <- new_speaker_name
# Check the modified entries
ted_new[rows_to_replace, "speaker"]
one_word_speaker <- grepl("^\\S+$", ted_new$speaker)
# Subset the dataframe to include only rows with one-word entries in "speaker"
one_word_entries <- ted_new[one_word_speaker, "speaker", drop = FALSE]
# Display the one-word entries
print(one_word_entries)
head(ted_new, 100)
# Split each entry in "speaker" into words
speaker_words <- strsplit(ted_new$speaker, "\\s+")
# Count the number of words in each entry
word_counts <- sapply(speaker_words, length)
# Create a logical vector indicating entries with more than three words
more_than_three_words <- word_counts > 3
# Subset the dataframe to include only rows with more than three words in "speaker"
more_than_three_entries <- ted_new[more_than_three_words, "speaker", drop = FALSE]
# Display the entries with more than three words
print(more_than_three_entries)
# Define the row numbers and corresponding speaker names to replace
rows_to_replace <- c(133, 146, 154, 159,  170, 184, 188, 208, 220, 223, 226, 231, 234, 238, 240, 242, 245, 2247, 250, 254, 257, 260, 263, 269, 272, 275, 277, 280, 283, 286, 289:291, 293, 295, 297, 309:311, 313, 322, 323, 325:326, 341, 343, 355, 358:361, 377:379, 396, 397, 400, 401, 403, 406, 408:409, 411, 415, 418, 420, 423, 428, 430, 432, 435, 438, 440, 443, 446, 448, 452, 454, 457, 460, 464, 467, 472, 474, 478, 485, 489, 492, 495, 497, 502, 503, 505, 511, 514, 517, 526, 533, 535, 537, 538, 540, 541, 543, 546, 549, 550, 553, 555, 556, 559, 563, 566, 572, 580, 583, 587, 590:591, 594, 596, 600, 602, 605, 608, 899:901, 1033, 1178:1180, 1285, 1475, 1657, 1674, 1735, 1773, 1956, 2258, 2293, 2277, 2904, 2971, 3215, 3370, 3533, 3589, 3658, 3769, 3807, 3911, 3922, 3989, 4197, 4203, 4235, )
# Define the row numbers and corresponding speaker names to replace
rows_to_replace <- c(133, 146, 154, 159,  170, 184, 188, 208, 220, 223, 226, 231, 234, 238, 240, 242, 245, 2247, 250, 254, 257, 260, 263, 269, 272, 275, 277, 280, 283, 286, 289:291, 293, 295, 297, 309:311, 313, 322, 323, 325:326, 341, 343, 355, 358:361, 377:379, 396, 397, 400, 401, 403, 406, 408:409, 411, 415, 418, 420, 423, 428, 430, 432, 435, 438, 440, 443, 446, 448, 452, 454, 457, 460, 464, 467, 472, 474, 478, 485, 489, 492, 495, 497, 502, 503, 505, 511, 514, 517, 526, 533, 535, 537, 538, 540, 541, 543, 546, 549, 550, 553, 555, 556, 559, 563, 566, 572, 580, 583, 587, 590:591, 594, 596, 600, 602, 605, 608, 899:901, 1033, 1178:1180, 1285, 1475, 1657, 1674, 1735, 1773, 1956, 2258, 2293, 2277, 2904, 2971, 3215, 3370, 3533, 3589, 3658, 3769, 3807, 3911, 3922, 3989, 4197, 4203, 4235)
new_speaker_name <- "TED"
# Replace the specified entries with "TED"
ted_new$speaker[rows_to_replace] <- new_speaker_name
# Check the modified entries
ted_new[rows_to_replace, "speaker"]
# Split each entry in "speaker" into words
speaker_words <- strsplit(ted_new$speaker, "\\s+")
# Count the number of words in each entry
word_counts <- sapply(speaker_words, length)
# Create a logical vector indicating entries with more than three words
more_than_three_words <- word_counts > 3
# Subset the dataframe to include only rows with more than three words in "speaker"
more_than_three_entries <- ted_new[more_than_three_words, "speaker", drop = FALSE]
# Display the entries with more than three words
print(more_than_three_entries)
# Save the dataframe as a CSV file
write.csv(ted_new, "youtube_ted_new3_2024_03_17.csv", row.names = FALSE)
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/Youtube/youtube_ted_new3_2024_03_17)
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/Youtube/youtube_ted_new3_2024_03_17.csv)
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/Youtube/youtube_ted_new3_2024_03_17.csv")
head(ted_new)
ted_new <- ted_new[, !colnames(ted_new) %in% c("speakers1", "speakers2", "speakers3")]
head(ted_new)
# Save the dataframe as a CSV file
write.csv(ted_new, "youtube_ted_new3_2024_03_17.csv", row.names = FALSE)
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/Youtube/youtube_ted_new3_2024_03_17.csv")
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube_ted_new3_2024_03_17.csv")
library(readxl)
ted_all <- read_excel("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube_ted_new3_2024_03_17.xlsx)
library(readxl)
ted_all <- read_excel("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube_ted_new3_2024_03_17.xlsx")
library(readxl)
ted_all <- read_excel("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube_ted_2024_03_17.xlsx")
library(readxl)
ted_all <- read_excel("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube_ted_2024_03_17.xlsx")
library(readxl)
ted_all <- read_excel("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube_ted_2024_03_17.xlsx")
library(readxl)
ted_all <- read_excel("/Users/ulrike_imac_air/projects/Trial_and_error/data/Youtube/youtube_ted_2024_03_17.xlsx")
library(readxl)
ted_all <- read_excel("/Users/ulrike_imac_air/projects/Trial_and_error/data/Youtube/youtube_ted_2024_03_17.xlsx")
ted_cleaned <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_ted_new3_2024_03_17.csv")
ted_cleaned <- read.csv2("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_ted_new3_2024_03_17.csv")
head(ted_cleaned)
skim(ted_cleaned)
library(skimr)
skim(ted_cleaned)
library(readcsv)
library(tidyverse)
library(dplyr)
library(knitr)
arte <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_arteconcert_2024_03_17-08_07_33.csv")
head(arte)
colnames(arte)
skim(arte)
library(tidyverse)
library(dplyr)
library(knitr)
library(skimr)
library(tidyverse)
library(dplyr)
library(knitr)
library(skimr)
head(arte)
colnames(arte)
skim(arte)
# str(arte)
#glimpse(arte)
#class(arte)
# Assuming 'arte' is your dataframe
arte <- arte[, !colnames(arte) %in% c("channelId", "publishedAt", "position", "duration", "dimension", "definition", "defaultLanguage", "thumbnail_maxres", "licensedContent", "locationDescription", "latitude", "longitude", "dislikeCount", "favoriteCount" )]
head(arte)
colnames(arte)
str(arte)
# Subset of publishedAtSQL into date and time
# Assuming 'arte' is your dataframe
arte$release_date <- substr(arte$publishedAtSQL, 1, 10)  # Extract yyyy-mm-dd
arte$release_time <- substr(arte$publishedAtSQL, 12, 19) # Extract hh:mm:ss
# Convert release_date and release_time to appropriate formats
arte$release_date <- as.Date(arte$release_date)
arte$release_time <- as.POSIXct(arte$release_time, format = "%H:%M:%S")
# Remove the original publishedAtSQL column if no longer needed
# arte <- arte[, !colnames(arte) %in% "publishedAtSQL"]
# Extract time portion from release_time column
arte$release_time <- format(arte$release_time, "%H:%M:%S")
# Check the dataframe
head(arte)
# Convert duration in seconds to minutes and seconds format
arte$duration <- sprintf("%02d:%02d", arte$durationSec %/% 60, arte$durationSec %% 60)
# Check the dataframe
head(arte)
# remove column durationSec
arte <- arte[, !colnames(arte) %in% c("publishedAtSQL", "durationSec")]
head(arte)
skim(arte)
# Assuming your dataframe is named df
df$videoTitle <- sub("- ARTE Concert", "", df$videoTitle)
# Assuming your dataframe is named df
arte$videoTitle <- sub("- ARTE Concert", "", arte$videoTitle)
head(arte)
# Assuming your dataframe is named df
arte$videoTitle <- sub("#.*", "", arte$videoTitle)
head(arte, 20)
# Assuming your dataframe is named df
arte$videoTitle <- sub(" - ARTE Concert$", "", arte$videoTitle)
head(arte, 30)
# Assuming your dataframe is named df
# Assuming your dataframe is named df
arte$videoTitle <- gsub(" - ARTE Concert$", "", arte$videoTitle)
head(arte, 30)
arte$videoTitle <- sub("- ARTE en Scène", "", arte$videoTitle)
head(arte, 30)
arte$videoTitle <- sub("- Dans le Club", "", arte$videoTitle)
head(arte, 30)
arte$videoTitle <- sub("- Dans le Club", "", arte$videoTitle)
head(arte, 70)
# Assuming your dataframe is named df
df$videoTitle <- gsub(" - ARTE Concert$", "", df$videoTitle)
# Assuming your dataframe is named df
arte$videoTitle <- gsub(" - ARTE Concert$", "", arte$videoTitle)
head(arte, 70)
# Assuming your dataframe is named df
arte$videoTitle <- gsub(" ARTE Concert$", "", arte$videoTitle)
head(arte, 70)
# Save the dataframe as a CSV file
write.csv(arte, "youtube_arteconcert_2024_03_17.csv", row.names = FALSE)
corey <- read.csv("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_Corey_Schafer_python_2024_03_17-08_24_58.csv")
head(corey)
colnames(corey)
skim(corey)
# str(corey)
#glimpse(corey)
#class(corey)
# Assuming 'corey' is your dataframe
corey <- corey[, !colnames(corey) %in% c("channelId", "publishedAt", "position", "duration", "dimension", "definition", "defaultLanguage", "thumbnail_maxres", "licensedContent", "locationDescription", "latitude", "longitude", "dislikeCount", "favoriteCount" )]
head(corey)
colnames(corey)
str(corey)
# Assuming 'corey' is your dataframe
corey <- corey[, !colnames(corey) %in% c("channelId", "publishedAt", "position", "duration", "dimension", "definition", "defaultLanguage", "thumbnail_maxres", "licensedContent", "locationDescription", "latitude", "longitude", "dislikeCount", "favoriteCount" )]
head(corey)
colnames(corey)
# str(corey)
# Subset of publishedAtSQL into date and time
# Assuming 'corey' is your dataframe
corey$release_date <- substr(corey$publishedAtSQL, 1, 10)  # Extract yyyy-mm-dd
corey$release_time <- substr(corey$publishedAtSQL, 12, 19) # Extract hh:mm:ss
# Convert release_date and release_time to appropriate formats
corey$release_date <- as.Date(corey$release_date)
corey$release_time <- as.POSIXct(corey$release_time, format = "%H:%M:%S")
# Remove the original publishedAtSQL column if no longer needed
# corey <- corey[, !colnames(corey) %in% "publishedAtSQL"]
# Extract time portion from release_time column
corey$release_time <- format(corey$release_time, "%H:%M:%S")
# Check the dataframe
head(corey)
# Convert duration in seconds to minutes and seconds format
corey$duration <- sprintf("%02d:%02d", corey$durationSec %/% 60, corey$durationSec %% 60)
# Check the dataframe
head(corey)
# Convert duration in seconds to minutes and seconds format
corey$duration <- sprintf("%02d:%02d", corey$durationSec %/% 60, corey$durationSec %% 60)
# Check the dataframe
head(corey, 30)
# remove column durationSec
corey <- corey[, !colnames(corey) %in% c("publishedAtSQL", "durationSec")]
head(corey, 50)
skim(corey)
# remove column durationSec
corey <- corey[, !colnames(corey) %in% c("publishedAtSQL", "durationSec")]
head(corey, 250)
skim(corey)
# Assuming your dataframe is named df
corey$codeSubject <- ifelse(grepl("CSS|Mac|Linux/Mac|Terminal|JavaScript|WordPress|Python|Git|SQL|Jupyter Notebook|Matplotlib|Visual Studio Code", corey$videoTitle),
"Code",
"Other")
head(corey, 120)
# Assuming your dataframe is named corey
corey$codeSubject <- ifelse(grepl("CSS", corey$videoTitle), "CSS",
ifelse(grepl("Mac", corey$videoTitle), "Mac",
ifelse(grepl("Linux/Mac", corey$videoTitle), "Linux/Mac",
ifelse(grepl("Terminal", corey$videoTitle), "Terminal",
ifelse(grepl("JavaScript", corey$videoTitle), "JavaScript",
ifelse(grepl("WordPress", corey$videoTitle), "WordPress",
ifelse(grepl("Python", corey$videoTitle), "Python",
ifelse(grepl("Git", corey$videoTitle), "Git",
ifelse(grepl("SQL", corey$videoTitle), "SQL",
ifelse(grepl("Jupyter Notebook", corey$videoTitle), "Jupyter Notebook",
ifelse(grepl("Matplotlib", corey$videoTitle), "Matplotlib",
ifelse(grepl("Visual Studio Code", corey$videoTitle), "Visual Studio Code",
"Other")))))))))))))
# Assuming your dataframe is named corey
corey$codeSubject <- ifelse(grepl("CSS", corey$videoTitle), "CSS",
ifelse(grepl("Mac", corey$videoTitle), "Mac",
ifelse(grepl("Linux/Mac", corey$videoTitle), "Linux/Mac",
ifelse(grepl("Terminal", corey$videoTitle), "Terminal",
ifelse(grepl("JavaScript", corey$videoTitle), "JavaScript",
ifelse(grepl("WordPress", corey$videoTitle), "WordPress",
ifelse(grepl("Python", corey$videoTitle), "Python",
ifelse(grepl("Git", corey$videoTitle), "Git",
ifelse(grepl("SQL", corey$videoTitle), "SQL",
ifelse(grepl("Jupyter Notebook", corey$videoTitle), "Jupyter Notebook",
ifelse(grepl("Matplotlib", corey$videoTitle), "Matplotlib",
ifelse(grepl("Visual Studio Code", corey$videoTitle), "Visual Studio Code",
"Other"))))))))))))
head(corey, 120)
head(corey, 220)
head(corey, 220)
colnames(corey)
# Assuming your dataframe is named df
new_order <- c("channelTitle", "videoId", "videoTitle", "release_date", "release_time", "duration", "codeSubject", "viewCount", "likeCount", "commentCount", "defaultLAudioLanguage", "videoDescription", "tags", "videoCategoryId", "videoCategoryLabel", "topicCategories", "caption")
corey <- corey[, new_order]
head(corey, 70)
# Save the dataframe as a CSV file
write.csv(corey, "youtube_Corey_Schafer_python_2024_03_17.csv", row.names = FALSE)
install.packages("paletteer")
library(paletteer)
install.packages("wesanderson")
library(wesanderson)
install.packages("ggsci")
yoga_theme_blue <- c("#4F5361", "#353E55", "#B6F9FF", "#78B1E5", "#5281B4" )
yoga_theme_six <- c("#00CCBB", "#A0DED9", "#FFF9D4", "#FFE5AC", "#FCC868", "#F69F2D")
boho_purple <- c("#927397", "#D6809c", "#E7CBAE", "#FAF5EF", "#7F7F7F")
colors_of_the_sea <- c("#e0ece4", "#f7f2e7", "#d8d3cd", "#797a7e", "#3a3b3b")
boho_purple_theme <- c("#927397", "#D6809c", "#E7CBAE", "#FAF5EF", "#7F7F7F")
colors_of_the_sea_theme <- c("#e0ece4", "#f7f2e7", "#d8d3cd", "#797a7e", "#3a3b3b")
power_yoga_theme <- c("#b82677", "#ec7545", "#a9d2cc", "#f4f5f6", "#221f20")
feminine_theme <- c("#f2aa98", "#fcf1ef", "#bfbfbf", "#f4f4f4", "#00000")
yoga_in_the_park_theme <- c("#bfae4a", "#e09592", "#f7e6e3", "#e4e4e2", "#474844")
winter_yoga_theme <- c("#707477", "#b0b1b1", "#dadac3", "#d8ccc1", "#2b2d2f", "#2b3241", "#9ea2ad", "#8b694d", "#e8e2d0", "#b0a18b")
yin_yoga_theme <- c("#e5babf", "#fcf1ef", "#e7d8c9", "#cdd3d6", "#5e616b")
