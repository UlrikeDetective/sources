# The first one creates the outer ring, and the second one creates the inner hole
outer_pie <- ggplot(data, aes(x = "", y = Value, fill = Category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0) +
scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
custom_theme_white_nolegend() +
labs(title = "Donut Chart with Custom Theme", fill = "Category") +
theme(legend.title = element_blank()) +
theme_void()
inner_pie <- ggplot(data, aes(x = "", y = Value, fill = Category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0) +
scale_fill_manual(values = "white") +  # Inner pie is filled with white to create a hole
theme_void()
# Combine both pie charts to create a donut chart effect
plot_output <- outer_pie + annotation_custom(ggplotGrob(inner_pie), xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)
# Create a donut chart using ggplot2
donut_chart <- ggplot(data, aes(x = 1, y = Value, fill = Category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0) +
scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
custom_theme_white_nolegend() +
labs(title = "Donut Chart with Custom Theme", fill = "Category") +
theme(legend.title = element_blank()) +
theme_void()
# Create a white circle in the center to simulate a donut hole
donut_chart <- donut_chart +
annotate("bar", x = 1, y = 0, yend = 0.5,
fill = "white", color = "white", alpha = 1, size = 3)
# Display the donut chart
donut_chart
# Create a donut chart using ggplot2
donut_chart <- ggplot(data, aes(x = 1, y = Value, fill = Category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0) +
scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
custom_theme_white_nolegend() +
labs(title = "Donut Chart with Custom Theme", fill = "Category") +
theme(legend.title = element_blank()) +
theme_void()
# Create a white circle in the center to simulate a donut hole
donut_chart <- donut_chart +
annotate("bar", x = 1, y = 0, ymin = 0, ymax = 0.5,
fill = "white", color = "white", alpha = 1, linewidth = 3)
# Display the donut chart
donut_chart
# Create a donut chart using ggplot2
donut_chart <- ggplot(data, aes(x = 1, y = Value, fill = Category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0) +
scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
custom_theme_white_nolegend() +
labs(title = "Donut Chart with Custom Theme", fill = "Category") +
theme(legend.title = element_blank()) +
theme_void()
# Create a white circle in the center to simulate a donut hole
donut_chart <- donut_chart +
geom_rect(xmin = 0.5, xmax = 1.5, ymin = 0.5, ymax = 1.5,
fill = "white", color = "white", alpha = 1)
# Display the donut chart
donut_chart
# Create a donut chart using ggplot2
ggplot(data, aes(x = 1, y = Value, fill = Category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0) +
scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
custom_theme_white_nolegend() +
labs(title = "Donut Chart with Custom Theme", fill = "Category") +
theme(legend.title = element_blank()) +
theme_void()
# Create a white circle in the center to simulate a donut hole
donut_chart <- donut_chart +
geom_rect(xmin = 0.5, xmax = 1.5, ymin = 0.5, ymax = 1.5,
fill = "white", color = "white", alpha = 1)
ggplot(data, aes(x = Category, y = Value, group = 1)) +
geom_line(color = "blue", size = 1) +  # Adjust color and size as needed
geom_point(color = "blue", size = 3) +  # Add points for each data point
custom_theme_white_nolegend() +
labs(title = "Line Chart with Custom Theme", x = "Category", y = "Value") +
scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
theme(legend.title = element_blank()) +
theme_minimal()
ggplot(data, aes(x = Category, y = Value, group = 1)) +
geom_line(color = "blue", size = 1) +  # Adjust color and size as needed
geom_point(color = "blue", size = 3) +  # Add points for each data point
custom_theme_black_nolegend() +
labs(title = "Line Chart with Custom Theme", x = "Category", y = "Value") +
scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
theme(legend.title = element_blank()) +
theme_minimal()
ggplot(data, aes(x = Category, y = Value, group = 1)) +
geom_line(color = "blue", size = 1) +  # Adjust color and size as needed
geom_point(color = "blue", size = 3) +  # Add points for each data point
custom_theme_black_nolegend() +
labs(title = "Line Chart with Custom Theme", x = "Category", y = "Value") +
scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
theme(legend.title = element_blank()) +
theme_minimal()
ggplot(data, aes(x = Category, y = Value, fill = Category)) +
geom_boxplot() +
custom_theme_white_nolegend() +
labs(title = "Boxplot with Custom Theme", x = "Category", y = "Value") +
scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
theme(legend.title = element_blank()) +
theme_minimal()
ggplot(data, aes(x = Category, y = Value, color = Category)) +
geom_point(size = 4) +
custom_theme_white_nolegend() +
labs(title = "Scatter Plot with Custom Theme", x = "Category", y = "Value") +
scale_color_manual(values = my_palette_Blue2DarkRed18Steps) +
theme(legend.title = element_blank()) +
theme_minimal()
ggplot(data, aes(x = Value, fill = Category)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
custom_theme_white_nolegend() +
labs(title = "Histogram with Custom Theme", x = "Value", y = "Frequency") +
scale_fill_manual(values = my_palette_Blue2DarkRed18Steps) +
theme(legend.title = element_blank()) +
theme_minimal()
# Additional variable for bubble sizes
bubble_sizes <- c(5, 10, 15)  # Modify these sizes as needed
# Create a bubble chart using ggplot2
ggplot(data, aes(x = Category, y = Value, size = Size, color = Category)) +
geom_point(alpha = 0.7) +
custom_theme_white_nolegend() +
labs(title = "Bubble Chart with Custom Theme", x = "Category", y = "Value", size = "Size") +
scale_color_manual(values = my_palette_Blue2DarkRed18Steps) +
theme(legend.title = element_blank()) +
theme_minimal()
# Additional variable for bubble sizes
bubble_sizes <- c(5, 10, 15)  # Modify these sizes as needed
# Create a data frame
data <- data.frame(Category = categories, Value = values, Size = bubble_sizes)
# Create a bubble chart using ggplot2
ggplot(data, aes(x = Category, y = Value, size = Size, color = Category)) +
geom_point(alpha = 0.7) +
custom_theme_white_nolegend() +
labs(title = "Bubble Chart with Custom Theme", x = "Category", y = "Value", size = "Size") +
scale_color_manual(values = my_palette_Blue2DarkRed18Steps) +
theme(legend.title = element_blank()) +
theme_minimal()
ggplot(data, aes(x = Category, y = Value)) +
geom_density_2d(aes(color = stat(level)), alpha = 0.7, size = 0.5) +
custom_theme_white_nolegend() +
labs(title = "2D Density Plot with Custom Theme", x = "Category", y = "Value") +
scale_color_manual(values = my_palette_Blue2DarkRed18Steps) +
theme(legend.title = element_blank()) +
theme_minimal()
# Additional variable for bubble sizes
bubble_sizes <- c(5, 10, 15)  # Modify these sizes as needed
# Create a data frame
data_blubble <- data.frame(Category = categories, Value = values, Size = bubble_sizes)
# Create a bubble chart using ggplot2
ggplot(data_bubble, aes(x = Category, y = Value, size = Size, color = Category)) +
geom_point(alpha = 0.7) +
custom_theme_white_nolegend() +
labs(title = "Bubble Chart with Custom Theme", x = "Category", y = "Value", size = "Size") +
scale_color_manual(values = my_palette_Blue2DarkRed18Steps) +
theme(legend.title = element_blank()) +
theme_minimal()
# Additional variable for bubble sizes
bubble_sizes <- c(5, 10, 15)  # Modify these sizes as needed
# Create a data frame
data_bubble <- data.frame(Category = categories, Value = values, Size = bubble_sizes)
# Create a bubble chart using ggplot2
ggplot(data_bubble, aes(x = Category, y = Value, size = Size, color = Category)) +
geom_point(alpha = 0.7) +
custom_theme_white_nolegend() +
labs(title = "Bubble Chart with Custom Theme", x = "Category", y = "Value", size = "Size") +
scale_color_manual(values = my_palette_Blue2DarkRed18Steps) +
theme(legend.title = element_blank()) +
theme_minimal()
# Example data
categories <- c("Category 1", "Category 2", "Category 3")
values <- c(20, 35, 15)
# Create a data frame
data <- data.frame(Category = categories, Value = values)
ggplot(data, aes(x = Category, y = Value)) +
geom_density_2d(aes(color = stat(level)), alpha = 0.7, size = 0.5) +
custom_theme_white_nolegend() +
labs(title = "2D Density Plot with Custom Theme", x = "Category", y = "Value") +
scale_color_manual(values = my_palette_Blue2DarkRed18Steps) +
theme(legend.title = element_blank()) +
theme_minimal()
ggplot(data, aes(x = Category, y = Value)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", color = "black", alpha = 0.7) +
custom_theme_white_nolegend() +
labs(title = "2D Density Plot with Custom Theme", x = "Category", y = "Value") +
scale_fill_viridis_c() +
theme_minimal()
install.packages("GGally")
library(GGally)
# Create a correlogram using GGally
correlogram <- ggpairs(data,
columns = c("Category", "Value"),
mapping = aes(color = Category),
upper = list(continuous = "points"),
lower = list(continuous = "smooth"),
diag = list(continuous = "barDiag"),
axisLabels = "internal",
title = "Correlogram")
# Display the correlogram
correlogram
library(reshape2)  # For data manipulation
install.packages("reshape2")
library(reshape2)  # For data manipulation
# Convert data to matrix format for heatmap
heatmap_data <- dcast(data, Category ~ Category, value.var = "Value")
# Create a heatmap using ggplot2
ggplot(heatmap_data, aes(x = Var1, y = Var2, fill = Value)) +
geom_tile() +
scale_fill_viridis_c() +  # You can choose a different color palette
labs(title = "Heatmap", x = "Category", y = "Category") +
theme_minimal()
# Convert data to matrix format for heatmap
heatmap_data <- dcast(data, Category ~ Category, value.var = "Value")
# Create a heatmap using ggplot2
heatmap_plot <- ggplot(heatmap_data, aes(x = Category, y = Category, fill = Value)) +
geom_tile() +
scale_fill_viridis_c() +  # You can choose a different color palette
labs(title = "Heatmap", x = "Category", y = "Category") +
theme_minimal()
# Display the heatmap
heatmap_plot
# Convert data to matrix format for heatmap
heatmap_data <- dcast(data, Category ~ Category, value.var = "Values")
# Convert data to matrix format for heatmap
heatmap_data <- dcast(data, Category ~ Category, value.var = "Value")
# Create a heatmap using ggplot2
heatmap_plot <- ggplot(heatmap_data, aes(x = Category, y = Category, fill = Values)) +
geom_tile() +
scale_fill_viridis_c() +  # You can choose a different color palette
labs(title = "Heatmap", x = "Category", y = "Category") +
theme_minimal()
# Display the heatmap
heatmap_plot
# Convert data to matrix format for heatmap
heatmap_data <- dcast(data, Category ~ Category, value.var = "Value")
# Create a heatmap using ggplot2
heatmap_plot <- ggplot(heatmap_data, aes(x = Category, y = Category, fill = Value)) +
geom_tile() +
scale_fill_viridis_c() +  # You can choose a different color palette
labs(title = "Heatmap", x = "Category", y = "Category") +
theme_minimal()
# Display the heatmap
heatmap_plot
# Example data
categories_heatmap <- c("Category 1", "Category 2", "Category 3")
values_heatmap <- c(20, 35, 15)
# Create a data frame
data_heatmap <- data.frame(Category = categories, Value = values)
# Convert data to matrix format for heatmap
heatmap_data <- dcast(data_heatmap, Category ~ Category, value.var = "Value")
# Create a heatmap using ggplot2
heatmap_plot <- ggplot(heatmap_data, aes(x = Category, y = Category, fill = Value)) +
geom_tile() +
scale_fill_viridis_c() +  # You can choose a different color palette
labs(title = "Heatmap", x = "Category", y = "Category") +
theme_minimal()
# Display the heatmap
heatmap_plot
# Example data
categories_heatmap <- c("Category 1", "Category 2", "Category 3")
values_heatmap <- c(20, 35, 15)
# Create a data frame
data_heatmap <- data.frame(Category = categories_heatmap, Value = values_heatmap)
# Convert data to matrix format for heatmap
heatmap_data <- dcast(data_heatmap, Category ~ Category, value.var = "Value")
# Create a heatmap using ggplot2
heatmap_plot <- ggplot(heatmap_data, aes(x = Category, y = Category, fill = Value)) +
geom_tile() +
scale_fill_viridis_c() +  # You can choose a different color palette
labs(title = "Heatmap", x = "Category", y = "Category") +
theme_minimal()
# Display the heatmap
heatmap_plot
# Example data
categories_heatmap <- c("Category 1", "Category 2", "Category 3")
values_heatmap <- c(20, 35, 15)
# Create a data frame
data_heatmap <- data.frame(Category = categories_heatmap, Value = values_heatmap)
# Create a heatmap using ggplot2
heatmap_plot <- ggplot(data_heatmap, aes(x = Category, y = Category, fill = Value)) +
geom_tile() +
scale_fill_viridis_c() +  # You can choose a different color palette
labs(title = "Heatmap", x = "Category", y = "Category") +
theme_minimal()
# Display the heatmap
heatmap_plot
install.packages("ggridges")
library(ggridges)
# Create a ridgeline plot using ggridges
ggplot(data, aes(x = Value, y = Category, fill = Category)) +
geom_density_ridges(alpha = 0.7, scale = 1.5) +
scale_fill_viridis_d() +  # You can choose a different color palette
labs(title = "Ridgeline Plot", x = "Value", y = "Category") +
theme_minimal()
ggplot(data, aes(x = Value, fill = Category)) +
geom_density(alpha = 0.7) +
scale_fill_viridis_d() +  # You can choose a different color palette
labs(title = "Density Plot", x = "Value", y = "Density") +
theme_minimal()
library(dplyr)
library(tidyr)
# Normalize values between 0 and 1 for the radar plot
data <- data %>% mutate(Normalized = (Value - min(Value)) / (max(Value) - min(Value)))
# Create a radar plot using ggplot2
ggplot(data, aes(x = Category, y = Normalized, group = 1)) +
geom_polygon(aes(fill = Category), alpha = 0.5) +
geom_line(aes(color = Category)) +
scale_fill_viridis_d() +
scale_color_viridis_d() +
labs(title = "Radar Plot", x = NULL, y = NULL) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 0.5),
legend.position = "none"
)
ggplot(data, aes(x = Category, y = Value)) +
geom_segment(aes(xend = Category, yend = 0), color = "skyblue", size = 2) +
geom_point(color = "blue", size = 3) +
labs(title = "Lollipop Chart", x = "Category", y = "Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
ggplot(data, aes(x = "", y = Value, fill = Category)) +
geom_bar(stat = "identity", width = 1, color = "black") +
coord_polar("y", start = 0) +
labs(title = "Circular Barplot", fill = "Category") +
scale_fill_viridis_d() +
theme_minimal() +
theme(axis.text.x = element_blank())
install.packages("ggally")
library(ggally)
# Example data
categories_parallel <- c("Category 1", "Category 2", "Category 3")
values1 <- c(20, 35, 15)
values2 <- c(30, 25, 10)
values3 <- c(15, 20, 25)
# Create a data frame
data_parallel <- data.frame(Category = categories_parallel, Value1 = values1, Value2 = values2, Value3 = values3)
# Transform data to long format for parallel plot
data_long <- tidyr::pivot_longer(data_parallel, cols = starts_with("Value"), names_to = "Variable", values_to = "Value")
# Create a parallel coordinate plot using ggplot2
parallel_plot <- ggplot(data_long, aes(x = Variable, y = Value, group = Category, color = Category)) +
geom_path(alpha = 0.5, size = 1) +
labs(title = "Parallel Coordinate Plot") +
scale_color_viridis_d() +
theme_minimal()
# Display the parallel coordinate plot
parallel_plot
# Load necessary libraries
library(wordcloud)
# Example data (random text for demonstration)
set.seed(123)
text_data <- paste(sample(LETTERS, 100, replace = TRUE), collapse = " ")
# Create a word cloud
wordcloud(words = names(table(strsplit(text_data, " ")[[1]])),
freq = as.numeric(table(strsplit(text_data, " ")[[1]])),
min.freq = 1,
scale = c(3, 0.5),
colors = brewer.pal(8, "Dark2"),
random.order = FALSE,
rot.per = 0.35,
use.r.layout = FALSE,
max.words = 100,
random.color = TRUE,
title = "Word Cloud Example")
# Load necessary libraries
library(kableExtra)
install.packages("kableExtra")
# Load necessary libraries
library(kableExtra)
# Load necessary libraries
library(kableExtra)
# Example data
categories <- c("Category 1", "Category 2", "Category 3")
values <- c(20, 35, 15)
# Create a data frame
data <- data.frame(Category = categories, Value = values)
# Render data as a table using kableExtra
table <- data %>%
kable("html") %>%
kable_styling(full_width = FALSE)
# Display the table
table
install.packages("ggalluvial")
install.packages("ggalluvial")
library(ggalluvial)
vaccinations
ggplot(data = vaccinations,
aes(axis1 = survey, axis2 = response, y = freq)) +
geom_alluvium(aes(fill = response)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Survey", "Response"),
expand = c(0.15, 0.05)) +
theme_void()
ggplot(data = vaccinations,
aes(axis1 = survey,   # First variable on the X-axis
axis2 = response, # Second variable on the X-axis
axis3 = survey,   # Third variable on the X-axis
y = freq)) +
geom_alluvium(aes(fill = response)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Survey", "Response"),
expand = c(0.15, 0.05)) +
theme_void()
ggplot(data = vaccinations,
aes(axis1 = survey, axis2 = response, y = freq)) +
geom_alluvium(aes(fill = response),
curve_type = "cubic") +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Survey", "Response"),
expand = c(0.15, 0.05)) +
theme_void()
ggplot(data = vaccinations,
aes(axis1 = survey, axis2 = response, y = freq)) +
geom_alluvium(aes(fill = response),
curve_type = "sine") +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Survey", "Response"),
expand = c(0.15, 0.05)) +
theme_void()
ggplot(data = vaccinations,
aes(axis1 = survey, axis2 = response, y = freq)) +
geom_alluvium(aes(fill = response),
curve_type = "sigmoid") +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Survey", "Response"),
expand = c(0.15, 0.05)) +
theme_void()
ggplot(data = vaccinations,
aes(axis1 = survey, axis2 = response, y = freq)) +
geom_alluvium(aes(fill = response)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Survey", "Response"),
expand = c(0.15, 0.05)) +
scale_fill_viridis_d() +
theme_void()
ggplot(data = vaccinations,
aes(axis1 = survey, axis2 = response, y = freq)) +
geom_alluvium(aes(fill = response)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Survey", "Response"),
expand = c(0.15, 0.05)) +
theme_void() +
guides(fill = guide_legend(title = "Title"))
ggplot(data = vaccinations,
aes(axis1 = survey, axis2 = response, y = freq)) +
geom_alluvium(aes(fill = response)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Survey", "Response"),
expand = c(0.15, 0.05)) +
theme_void() +
scale_fill_hue(labels = c("A", "B", "C", "D"))
ggplot(data = vaccinations,
aes(axis1 = survey, axis2 = response, y = freq)) +
geom_alluvium(aes(fill = response)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Survey", "Response"),
expand = c(0.15, 0.05)) +
theme_void() +
theme(legend.position = "none")
# Creating the data
SBB <- c("Mitte", "Nordost", "Ost", "Südost", "Süd", "Südwest", "West", "Alt-West", "Nordwest", "Nord")
Anzahl_eingereicht <- c(113, 77, 131, 81, 108, 133, 95, 121, 73, 109)
Anzahl_beschlossen <- c(55, 29, 51, 39, 59, 58, 54, 62, 39, 55)
Summe2021 <- c("50.000 €", "49.915 €", "49.293 €", "31.910 €", "49.990 €", "32.159 €", "50.000 €", "45.550 €", "41.391 €", "31.732 €")
Summe2022 <- c("49.577 €", "49.745 €", "43.395 €", "49.993 €", "46.400 €", "49.990 €", "44.415 €", "49.962 €", "27.349 €", "33.978 €")
Summe2023 <- c("50.000 €", "40.572 €", "32.250 €", "20.534 €", "50.000 €", "49.999 €", "41.563 €", "40.167 €", "37.731 €", "47.700 €")
# Creating the dataframe
SBBudget <- data.frame(SBB, Anzahl_eingereicht, Anzahl_beschlossen, Summe2021, Summe2022, Summe2023, stringsAsFactors = FALSE)
# Converting currency columns to numeric
SBBudget$Summe2021 <- as.numeric(gsub(" €", "", SBBudget$Summe2021))
SBBudget$Summe2022 <- as.numeric(gsub(" €", "", SBBudget$Summe2022))
SBBudget$Summe2023 <- as.numeric(gsub(" €", "", SBBudget$Summe2023))
# Displaying the dataframe
print(SBBudget)
library(ggplot2)
# Assuming SBBudget dataframe has been created
SBBudget_long <- tidyr::pivot_longer(SBBudget, cols = starts_with("Summe"), names_to = "Year", values_to = "Summe")
ggplot(data = SBBudget_long,
aes(axis1 = SBB, axis2 = Year, y = Summe)) +
geom_alluvium(aes(fill = Year)) +
geom_stratum() +
geom_text(stat = "stratum",
aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("SBB", "Year"),
expand = c(0.15, 0.05)) +
theme_void() +
theme(legend.position = "none")
install.packages("CGPfunctions")
library(CGPfunctions)
install.packages("CGPfunctions")
library(CGPfunctions)
