---
title: "Radar chart (spider plot) in R with fmsb"
format: html
editor: visual
---

# **Radar chart (spider plot) in R with fmsb**

## **Sample data sets**

The `radarchart` function from `fmsb` package needs a data frame where **the first row represents the maximum values of the data (10) and the second row the minimum values (0)**. Otherwise, you will need to set `maxmin = FALSE`. Note that the number of columns must be greater than two.

Each column is a variable and the additional rows represents groups or individuals. In `df` we have only one group and 8 different variables.

**Data set with one group**

```{r}
set.seed(1)
df <- data.frame(rbind(rep(10, 8), rep(0, 8),
                       matrix(sample(0:10, 8),
                              nrow = 1)))
colnames(df) <- paste("Var", 1:8)
```

If you want to add more groups or individuals append more rows to the data frame. In `df2` we have 8 variables of tree different groups.

**Data set with several groups**

```{r}
set.seed(1)
df2 <- data.frame(rbind(rep(10, 8), rep(0, 8),
                       matrix(sample(0:10, 24,
                                     replace = TRUE),
                              nrow = 3)))
colnames(df2) <- paste("Var", 1:8)
```

## **Basic radar chart**

The default radar chart can be created passing the data frame to the `radarchart` function of the package.

```{r}
install.packages("fmsb")
library(fmsb)

radarchart(df)
```

If you don\'t like the default styling of the plot you can customize it. The `cglty`, `cglcol` and `cglwd` arguments can be used to change the line type, color and line width of the grid lines and `pcol`, `plwd` and `plty` to change the color, line width and linetype of the line representing the values of the variables.

```{r}
# install.packages("fmsb")
library(fmsb)

radarchart(df,
           cglty = 1,       # Grid line type
           cglcol = "gray", # Grid line color
           cglwd = 1,       # Line width of the grid
           pcol = 4,        # Color of the line
           plwd = 2,        # Width of the line
           plty = 1)        # Line type of the line 
```

## **Fill the area**

You can also fill the area of the polygon created making use of the `pfcol` argument. It is recommended to use a [color](https://r-charts.com/colors/) with transparency for a better result.

```{r}
# install.packages("fmsb")
library(fmsb)

radarchart(df,
           cglty = 1, cglcol = "gray",
           pcol = 4, plwd = 2,
           pfcol = rgb(0, 0.4, 1, 0.25)) 
```

**Shading lines**

Alternatively, you can add shading lines to the polygon with `pdensity` and change their angle with `pangle` argument.

```{r}
# install.packages("fmsb")
library(fmsb)

radarchart(df,
           cglty = 1, cglcol = "gray",
           pcol = 1, plwd = 2,
           pdensity = 10,
           pangle = 40)  
```

## **Radar chart of several groups**

The process for creating a radar chart for several groups or individuals is the same as in the previous section, you just need to pass the data frame with several variables we created on the first section.

```{r}
# install.packages("fmsb")
library(fmsb)

radarchart(df2) 
```

**Lines customization**

In this scenario you can customize the colors, line styles and line widths for each group.

```{r}
# install.packages("fmsb")
library(fmsb)

radarchart(df2,
           cglty = 1,       # Grid line type
           cglcol = "gray", # Grid line color
           pcol = 2:4,      # Color for each line
           plwd = 2,        # Width for each line
           plty = 1)        # Line type for each line  
 

```

**Fill areas**

You can also set a fill color for each group.

```{r}
# install.packages("fmsb")
library(fmsb)

# Fill colors
areas <- c(rgb(1, 0, 0, 0.25),
           rgb(0, 1, 0, 0.25),
           rgb(0, 0, 1, 0.25))

radarchart(df2,
           cglty = 1,       # Grid line type
           cglcol = "gray", # Grid line color
           pcol = 2:4,      # Color for each line
           plwd = 2,        # Width for each line
           plty = 1,        # Line type for each line
           pfcol = areas)   # Color of the areas   
```

Finally, it is recommended to [add a legend](https://r-charts.com/base-r/legend) when displaying several groups making use of the `legend` function, as shown in the following example.

```{r}
# install.packages("fmsb")
library(fmsb)

areas <- c(rgb(1, 0, 0, 0.25),
           rgb(0, 1, 0, 0.25),
           rgb(0, 0, 1, 0.25))

radarchart(df2,
           cglty = 1,       # Grid line type
           cglcol = "gray", # Grid line color
           pcol = 2:4,      # Color for each line
           plwd = 2,        # Width for each line
           plty = 1,        # Line type for each line
           pfcol = areas)   # Color of the areas   

legend("topright",
       legend = paste("Group", 1:3),
       bty = "n", pch = 20, col = areas,
       text.col = "grey25", pt.cex = 2) 
```

# **Radar chart in ggplot2 with ggradar**

## **Sample data set**

The `ggradar` package contains a function of the same name which needs a data frame as input, where the **first column is the name of the groups and each column represents a variable**. Note that **all columns must have the same scale**.

```{r}
set.seed(4)
df <- data.frame(matrix(runif(30), ncol = 10))
df[, 1] <- paste0("G", 1:3)
colnames(df) <- c("Group", paste("Var", 1:9))
```

## **Most basic radar chart**

Passing your data frame to the `ggradar` function will create the following visualization. Note that if the values of your columns are not between 0 and 1 you will need to specify the minimum value with `grid.min` and the maximum value with `grid.max`.

```{r}
# install.packages("devtools")
1devtools::install_github("ricardo-bion/ggradar")
library(ggradar)

ggradar(df) 
```

## **Radar chart labels**

The labels of the grid can be customized with `values.radar` and the labels of each variable with `axis.labels`.

```{r}
# install.packages("devtools")
# devtools::install_github("ricardo-bion/ggradar")
library(ggradar)

ggradar(df, 
        values.radar = c(0, 0.5, 1),
        axis.labels = paste0("A", 1:9)) 
```

## **Radar chart colors and line types**

The function provides several arguments to customize the colors, such as `background.circle.colour` for the background color, `group.colours` for the colors of the lines and `gridline.X.colour` to customize the grid lines color, being X `min`, `max` or `mid`.

```{r}
# install.packages("devtools")
# devtools::install_github("ricardo-bion/ggradar")
library(ggradar)

# Color for the lines
lcols <- c("#EEA236", "#5CB85C", "#46B8DA")

ggradar(df,
        background.circle.colour = "white",
        axis.line.colour = "gray60",
        gridline.min.colour = "gray60",
        gridline.mid.colour = "gray60",
        gridline.max.colour = "gray60",
        group.colours = lcols) 
```

## **Legend**

**Legend position**

It is possible to change the legend position with the `legend.position` argument and to change the legend title with `legend.title`.

```{r}
# install.packages("devtools")
# devtools::install_github("ricardo-bion/ggradar")
library(ggradar)

ggradar(df,
        legend.title = "Group",
        legend.position = "bottom") 
```

**Remove the legend**

Finally, if you want to get rid of the legend you can set `plot.legend = FALSE` or `legend.position = "none"`.

```{r}
# install.packages("devtools")
# devtools::install_github("ricardo-bion/ggradar")
library(ggradar)

ggradar(df,
        plot.legend = FALSE) 
```

Note that the function provides more arguments to fine tune some details, such as adding custom fonts or changing the text size. Recall to type `?ggradar` for further details.
