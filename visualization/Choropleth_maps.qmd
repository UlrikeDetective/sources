---
title: "Choropleth maps in R"
format: html
editor: visual
---

# **Choropleth maps in R**

A choropleth map is a type of map where different geographic areas are colored based on a variable associated to each of those areas. A choropleth map provide an intuitive way to visualize how a specific variable (as population density, income, etc.) could vary across different geographic areas.

In this tutorial we will use the `giscoR` package to get the map data of Italy in `sf` format and we will use the example dataset of the same package named `tgs00026`, which provides the disposable income of private households at [NUTS2](https://ec.europa.eu/eurostat/web/nuts/background) level. On this example, we would use the year **2013** as a reference.

## **Base map**

In first place, we would need to get the spatial data that contains the geographical information to be used on the plot. When using `giscoR`, we can select the NUTS geometries with the `gisco_get_nuts` function and specify the country we want to plot inside the `country` argument. In order to plot the map we can apply the `st_geometry` function to our data and use the `plot` function.

```{r}
install.packages("sf")
library(sf)
# install.packages("dplyr")
library(dplyr)
install.packages("giscoR")
library(giscoR)
```

```{r}

year_ref <- 2013

nuts2_IT <- gisco_get_nuts(
  year = year_ref,
  resolution = 20, 
  nuts_level = 2,
  country = "Italy") %>%
  select(NUTS_ID, NAME_LATN)

plot(st_geometry(nuts2_IT)) 
 
```

## **Projection**

We can slightly improve the map by changing the **Coordinate Reference System** (CRS) to **WGS 84 / UTM zone 32N** ([EPSG code: 32632](https://epsg.io/32632)).

```{r}
# Transform the shape
nuts2_IT_32632 <- st_transform(nuts2_IT, 32632)

plot(st_geometry(nuts2_IT_32632)) 
```

## **Join map and data**

As we geographical objects in `sf` behaves as data frames we can perform a left join to merge the statistical and the geographical data.

As a result, we would have an object named `nuts2_IT_32632_data` containing the geographical coordinates and the disposable income of private households of Italy for each NUTS2 region (`values` column).

```{r}
# Filter to select data from 2013
disp_income <- giscoR::tgs00026 %>%
  filter(time == year_ref) %>%
  select(-time)

nuts2_IT_32632_data <- nuts2_IT_32632 %>%
  left_join(disp_income, by = c("NUTS_ID" = "geo"))

```

## **Basic choropleth map**

After merging our data, we have available an `sf` object with the statistical data to be plotted. We can now proceed to create a basic choropleth map plotting the `values` column of the data frame.

The `breaks` argument allows you to specify a numeric vector with the actual breaks or a method. Possible methods are `"fixed"`, `"sd"`, `"equal"`, `"pretty"`, `"quantile"`, `"kmeans"`, `"hclust"`, `"bclust"`, `"fisher"`, `"jenks"`, `"dpih"` and `"headtails"`.

```{r}
plot(nuts2_IT_32632_data[, "values"],
     breaks = "jenks",
     main = "Choropleth map")
```

Note that with the `nbreaks` argument you can change the number of categories to be plotted and that you can change the color palette with `pal` (defaults to `sf.colors`).

```{r}
plot(nuts2_IT_32632_data[, "values"],
     breaks = "jenks",
     nbreaks = 10,
     pal = hcl.colors(10),
     main = "Choropleth map") 

```

## **Advanced choropleth map**

In this section we are going to customize some features of the previous map in order to create a more advanced map. We are going to use custom breaks and colors to create a categorical map derived from the continuous disposable income data of Italy. In addition, we are going to plot also surrounding countries not included in the sample.

First, we are going to get all the countries of the world to be used as a base map.

```{r}
# Get all countries and transform to the EU CRS
cntries <- gisco_get_countries(
  year = year_ref,
  resolution = 20) %>%
  st_transform(3035)

# Plot
plot(st_geometry(cntries),
     col = "grey80", border = NA,
     xlim = c(4600000, 4700000),
     ylim = c(1500000, 2600000))
```

Now, we can start preparing the choropleth overlay. We start by cleaning the data and creating the discrete categories making use of the `cut` function. We also prepare here the labels to be included on the legend of the map.

```{r}
# Clean NAs from  initial dataset
nuts2_IT_32632_data_clean <- nuts2_IT_32632_data %>%
  filter(!is.na(values))

# Create breaks and discretize values
br <- c(10, 12, 14, 16, 18, 20) * 1000

nuts2_IT_32632_data_clean$disp_income <-
  cut(nuts2_IT_32632_data_clean$values,
      breaks = br, dig.lab = 5)

# Create custom labels - e.g. (0k-10k]
labs <- c(10, 12, 14, 16, 18, 20)
labs_plot <- paste0("(", labs[1:5], "k-", labs[2:6], "k]")
```

Finally, we choose the `Spectral` palette included on the `hcl.colors` function and proceed to create the final map, merging the base map, overlaying the Italy map and adding a legend:

```{r}
# Palette
pal <- hcl.colors(6, "Spectral", rev = TRUE, alpha = 0.75)

# Base plot
plot(st_geometry(cntries),
  col = "grey80",
  border = NA,
  xlim = c(4600000, 4700000),
  ylim = c(1500000, 2600000),
  main = "Disposable income of private households")
mtext("Italy NUTS2 regions (2013)", side = 3, adj = 0)

# Overlay
plot(st_transform(nuts2_IT_32632_data_clean[, "disp_income"],
                  crs = 3035), # Transform to the European CRS
  border = NA,
  pal = pal,
  categorical = TRUE,
  add = TRUE)

# Legend
legend(x = "topright",
       title = "â‚¬/household",
       cex = 0.9,
       bty = "n",
       inset = 0.02,
       y.intersp = 1.5,
       legend = labs_plot,
       fill = pal)
```

# **Choropleth maps in ggplot2**

A choropleth map is a type of map where different geographic areas are colored based on a variable associated to each of those areas. A choropleth map provide an intuitive way to visualize how a specific variable (as population density, income, etc.) could vary across different geographic areas.

We would use the data included on the `giscoR` package, that provides map data on `sf` format and an example dataset `tgs00026`, that includes the disposable income of private households at [NUTS2](https://ec.europa.eu/eurostat/web/nuts/background) level. On this example, we would use the year **2016** as a reference.

## **Base map**

In first place, we would need to get the spatial data that contains the geographical information to be used on the plot. On `giscoR`, we can select the NUTS geometries with `giscoR::gisco_get_nuts()` and visualize the object with `geom_sf`:

```{r}
# install.packages("sf")
library(sf)
# install.packages("dplyr")
library(dplyr)
# install.packages("ggplot2")
library(ggplot2)
# install.packages("giscoR")
library(giscoR)

# Year
year_ref <- 2016

# Data
nuts2 <- gisco_get_nuts(year = year_ref,
                        resolution = 20,
                        nuts_level = 2) %>%
         select(NUTS_ID, NAME_LATN)

# Base map
ggplot(nuts2) +
  geom_sf() 
```

## **Limits and projection**

We can improve the map by changing the **Coordinate Reference System** (CRS) to **ETRS89-extended / LAEA Europe** ([EPSG code: 3035](https://epsg.io/3035)) and focusing the map on the continental area. We can use `xlim` and `ylim` to define the limits of the map:

```{r}
# Transform the shape
nuts2_3035 <- st_transform(nuts2, 3035)

ggplot(nuts2_3035) +
  geom_sf() +
  xlim(c(2200000, 7150000)) +
  ylim(c(1380000, 5500000)) 
```

## **Join map and data**

One of the advantages of `sf` is that the geographical objects behave as data frames, so we can perform a simple join to merge the statistical data with the geographical data. Now, we would have an object with the data from `giscoR::tgs00026` and a `geometry` column, that includes the geographical data coordinates.

```{r}
# Filter to select data from 2016
disp_income <- giscoR::tgs00026 %>%
  filter(time == year_ref) %>%
  select(-time)

nuts2_3035_data <- nuts2_3035 %>%
  left_join(disp_income, by = c("NUTS_ID" = "geo"))
```

## **Basic choropleth map**

As a result of the previous process, we have available an `sf` object with the statistical data to be plotted. We can now proceed to create a basic choropleth map with `ggplot2`, passing the values (`values` column) of interest to the `fill` argument of `aes`:

```{r}
ggplot(nuts2_3035_data) +
  geom_sf(aes(fill = values)) +
  xlim(c(2200000, 7150000)) +
  ylim(c(1380000, 5500000)) 
```

**Lines customization**

Note that you can change the color, the type and the width of the lines with the corresponding arguments of the `geom_sf` function.

```{r}
ggplot(nuts2_3035_data) +
  geom_sf(aes(fill = values), 
          color = "white",
          linetype = 1,
          lwd = 0.25) +
  xlim(c(2200000, 7150000)) +
  ylim(c(1380000, 5500000)) 
```

**Fill color customization**

You can also specify a continuous color scale, such as `scale_fill_viridis_c`. We can still modify some features of the map to create a more eye-catching plot.

```{r}
ggplot(nuts2_3035_data) +
  geom_sf(aes(fill = values),
          color = NA) +
  xlim(c(2200000, 7150000)) +
  ylim(c(1380000, 5500000)) +
  scale_fill_viridis_c(option = "B") 

```

## **Advanced choropleth map**

We are going to modify some features of the map in order to create a more advanced map. We would use custom breaks and colors to create a categorical map derived from the continuous disposable income data. Additionally, we would plot also surrounding countries not included in the sample.

We start by **getting the whole countries of the world**, that would be used as our base map.

```{r}
# Get all countries and transform to the same CRS
cntries <- gisco_get_countries(year = year_ref,
                               resolution = 20) %>%
           st_transform(3035)

# Plot
choro_adv <- ggplot() +
  # First overlay with the whole world
  geom_sf(data = cntries, fill = "grey80", color = NA) +
  # Set limits
  xlim(c(2200000, 7150000)) +
  ylim(c(1380000, 5500000))

choro_adv
```

Now, we can start preparing the **choropleth overlay**. We start by removing the data values with `NA` and creating discrete categories. We also prepare here the labels to be included on the legend of the map.

```{r}
# Clean NAs from initial dataset
nuts2_3035_data_clean <- nuts2_3035_data %>%
  filter(!is.na(values))

# Create breaks and discretize values
br <- c(0, 10, 15, 20, 25, 30, 50) * 1000

nuts2_3035_data_clean$disp_income <- cut(nuts2_3035_data_clean$values,
                                         breaks = br,
                                         dig.lab = 5)

# Create custom labels - e.g. (0k-10k]
labs <- c(0, 10, 15, 20, 25, 30, 50)
labs_plot <- paste0("(", labs[1:6], "k-", labs[2:7], "k]")
```

Finally, we choose the `Inferno` palette included on the `hcl.colors` function (R \>= 3.6) and proceed to create the final map:

```{r}
# Palette
pal <- hcl.colors(6, "Inferno", rev = TRUE, alpha = 0.7)

# Add overlay
choro_adv +
  # Add choropleth overlay
  geom_sf(data = nuts2_3035_data_clean,
          aes(fill = disp_income), color = NA) +
  # Labs
  labs(title = "Disposable income of private households",
       subtitle = "NUTS2 regions (2016)",
       caption = "Eurostat, Â© EuroGeographics for the administrative boundaries",
       fill = "â‚¬") +
  # Custom palette
  scale_fill_manual(values = pal,
                    drop = FALSE,
                    na.value = "grey80",
                    label = labs_plot,
                    # Legend
                    guide = guide_legend(direction = "horizontal",
                                         nrow = 1,
                                         label.position = "bottom")) +
  # Theme
  theme_void() +
  theme(plot.caption = element_text(size = 7, face = "italic"),
        legend.position = "bottom")
```
