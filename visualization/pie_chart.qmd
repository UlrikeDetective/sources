---
title: "Pie chart"
format: html
editor: visual
---

# **Pie chart with percentages in ggplot2**

The data set below contains the answers (Yes, No or N/A) of a poll. This data will be transformed an used in the examples of this tutorial.

```{r}
set.seed(11022021)

# Variables
ans <- sample(c("Yes", "No", "N/A"),
              size = 100, replace = TRUE,
              prob = c(0.4, 0.35, 0.25))
gen <- sample(c("Male", "Female"),
              size = 100, replace = TRUE)

# Change the levels of the variable
# so "Yes" appears first in the legend
ans <- factor(ans, levels = c("Yes", "No", "N/A"))

# Data frame
data <- data.frame(answer = ans,
                   gender = gen)

```

Making use of `dplyr` you can get the percentage for each type of answer or for each gender. In the following example we are calculating the percentage by type of answer and adding a new column with percentages, making use of the `percent` function of the `scales` library.

```{r}
install.packages("dplyr")
install.packages("scales")
```

```{r}

library(dplyr)

# Data transformation
df <- data %>% 
  group_by(answer) %>% # Variable to be transformed
  count() %>% 
  ungroup() %>% 
  mutate(perc = `n` / sum(`n`)) %>% 
  arrange(perc) %>%
  mutate(labels = scales::percent(perc))
```

In the previous table the first column represents the possible answers, the second the absolute frequency, the third the relative frequency and the fourth the percentage with the symbol.

## **Pie chart with percentages**

Once you have transformed your data, you can pass the column containing the relative frequency to `y` and fill by the categorical variable representing groups.

```{r}
# install.packages("ggplot2")
library(ggplot2)

ggplot(df, aes(x = "", y = perc, fill = answer)) +
  geom_col() +
  coord_polar(theta = "y") 

```

## **Adding the percentage labels of the pie chart**

The `labels` column allows you to add the labels with percentages. In this example we are adding them with `geom_text`.

```{r}
ggplot(df, aes(x = "", y = perc, fill = answer)) +
  geom_col() +
  geom_text(aes(label = labels),
            position = position_stack(vjust = 0.5)) +
  coord_polar(theta = "y")

```

An alternative to `geom_text` is `geom_label`. Note that we had to override the aesthetic of the legend with `show.legend = FALSE`, or a letter will appear over the legend fill colors.

```{r}
# install.packages("ggplot2")
library(ggplot2)

ggplot(df, aes(x = "", y = perc, fill = answer)) +
  geom_col() +
  geom_label(aes(label = labels),
             position = position_stack(vjust = 0.5),
             show.legend = FALSE) +
  coord_polar(theta = "y") 
 
```

## **Further customization**

The pie charts can be customized in several ways. You can customize the legend, the colors or the themes. In the following example we removed the default theme with `theme_void`. See the article about [pie charts in ggplot2](https://r-charts.com/part-whole/pie-chart-ggplot2/) for additional customization of the ggplot2 pie charts and its legend.

```{r}
# install.packages("ggplot2")

ggplot(df, aes(x = "", y = perc, fill = answer)) +
  geom_col(color = "black") +
  geom_label(aes(label = labels), color = c(1, "white", "white"),
            position = position_stack(vjust = 0.5),
            show.legend = FALSE) +
  guides(fill = guide_legend(title = "Answer")) +
  scale_fill_viridis_d() +
  coord_polar(theta = "y") + 
  theme_void()
```

# **Pie chart with labels outside in ggplot2**

## **Sample data set**

The data frame below contains a numerical variable representing a percentage and a categorical variable representing groups. This data frame will be used in the following examples.

```{r}
df_pie <- data.frame(value = c(15, 25, 32, 28),
                 group = paste0("G", 1:4))
```

## **Pie chart with values outside using `ggrepel`**

If you need to display the values of your pie chart outside for styling or because the labels doesn\'t fit inside the slices you can use the `geom_label_repel` function of the `ggrepel` package after transforming the original data frame as in the example below.

```{r}
# install.packages("ggplot2")
install.packages("ggrepel")
# install.packages("tidyverse")
```

```{r}
library(ggplot2)
library(ggrepel)
library(tidyverse)
```

```{r}
# Get the positions
df2 <- df_pie %>% 
  mutate(csum = rev(cumsum(rev(value))), 
         pos = value/2 + lead(csum, 1),
         pos = if_else(is.na(pos), value/2, pos))

ggplot(df_pie, aes(x = "" , y = value, fill = fct_inorder(group))) +
  geom_col(width = 1, color = 1) +
  coord_polar(theta = "y") +
  scale_fill_brewer(palette = "Pastel1") +
  geom_label_repel(data = df2,
                   aes(y = pos, label = paste0(value, "%")),
                   size = 4.5, nudge_x = 1, show.legend = FALSE) +
  guides(fill = guide_legend(title = "Group")) +
  theme_void()
```

Note that you can display the percentage, the values, the groups or any labels using this method.

## **Pie chart with values inside and labels outside**

An alternative to the previous example is adding the values inside the slices but labeling each slice with a text. You can achieve this passing the calculated positions to the `breaks` argument of `scale_y_continuous` and adding the labels.

```{r}
# install.packages("ggplot2")
# install.packages("tidyverse")
# library(ggplot2)
# library(tidyverse)

# Get the positions
df2 <- df_pie %>% 
  mutate(csum = rev(cumsum(rev(value))), 
         pos = value/2 + lead(csum, 1),
         pos = if_else(is.na(pos), value/2, pos))

ggplot(df_pie, aes(x = "", y = value, fill = fct_inorder(group))) +
  geom_col(width = 1, color = 1) +
  geom_text(aes(label = value),
            position = position_stack(vjust = 0.5)) +
  coord_polar(theta = "y") +
  guides(fill = guide_legend(title = "Group")) +
  scale_y_continuous(breaks = df2$pos, labels = df$group) +
  theme(axis.ticks = element_blank(),
        axis.title = element_blank(),
        axis.text = element_text(size = 15), 
        legend.position = "none", # Removes the legend
        panel.background = element_rect(fill = "white")) 
 
 

```

# **Pie chart with categorical data in R**

## **Pie chart with categorical data with `pie`**

In order to create a pie chart in base R from a categorical variable you just need to create a table with your data with the `table` function and pass it to the `pie` function.

```{r}
# Categorical data
cat_var <- factor(c(rep("Group 1", 10),
                    rep("Group 2", 15),
                    rep("Group 3", 30),
                    rep("Group 4", 20)))

# Create a table from the data
cat <- table(cat_var)

# Pie
pie(cat,
    col = hcl.colors(length(cat), "BluYl")) 

```

## **Pie chart with categorical with `PieChart`**

If you want to display the group labels, in addition to the corresponding percentage for each group, you can use `PieChart` from `lessR`. This function also displays a table of frequencies and proportions and performs a Chi-square test for checking the equality of probabilities. Note that the data must be a variable of a data frame.

In addition, you can convert the pie chart into a doughnut chart if needed, increasing the value of `hole`.

```{r}
# install.packages("lessR")
library(lessR)
```

```{r}

# Categorical data
cat_var <- factor(c(rep("Group 1", 10),
                    rep("Group 2", 15),
                    rep("Group 3", 30),
                    rep("Group 4", 20)))

# Store the variable as data frame
cat <- data.frame(cat_var)

# Pie
cols <-  hcl.colors(length(levels(cat_var)), "Fall")
PieChart(cat_var, data = cat, hole = 0,
         fill = cols,
         labels_cex = 0.6) 
 
 

```

# **Pie chart in ggplot2**

## **Sample data**

The following data frame contains a numerical variable representing the count of some event and the corresponding label for each value.

```{r}
df_pie2 <- data.frame(value = c(10, 23, 15, 18),
                 group = paste0("G", 1:4))
```

## **Basic pie chart with `geom_bar` or `geom_col` and `coord_polar`**

**Basic pie chart**

A pie chart in ggplot is a bar plot plus a polar coordinate. You can use `geom_bar` or `geom_col` and `theta = "y"` inside `coord_polar`.

```{r}
# install.packages("ggplot2")
# library(ggplot2)

ggplot(df_pie2, aes(x = "", y = value, fill = group)) +
  geom_col() +
  coord_polar(theta = "y")
```

**Color of the lines**

The borders of the pie can be changed with the `color` argument of the `geom_bar` or `geom_col` function.

```{r}
ggplot(df_pie2, aes(x = "", y = value, fill = group)) +
  geom_col(color = "black") +
  coord_polar(theta = "y")
```

## **Text and labels**

**Adding text**

By default, the values are not displayed inside each slice. You can add them with `geom_text`. Note that `position_stack(vjust = 0.5)` will place the labels in the correct position.

```{r}
# install.packages("ggplot2")
# library(ggplot2)

ggplot(df_pie2, aes(x = "", y = value, fill = group)) +
  geom_col(color = "black") +
  geom_text(aes(label = value),
            position = position_stack(vjust = 0.5)) +
  coord_polar(theta = "y") 
 
 

```

**Adding labels**

An alternative to `geom_text` is using `geom_label`, which adds a border around the values. If you set this the legend will display the letter \"a\" inside the boxes, so we have overridden this behavior with `show.legend = FALSE`.

```{r}
# install.packages("ggplot2")
# library(ggplot2)

ggplot(df_pie2, aes(x = "", y = value, fill = group)) +
  geom_col(color = "black") +
  geom_label(aes(label = value),
             color = "white",
             position = position_stack(vjust = 0.5),
             show.legend = FALSE) +
  coord_polar(theta = "y") 

```

## **Color customization**

**Color palette**

The default color palette can be changed with a predefined color palette, such as the `scale_fill_brewer` or `scale_fill_viridis_d`.

```{r}
# install.packages("ggplot2")
# library(ggplot2)

ggplot(df_pie2, aes(x = "", y = value, fill = group)) +
  geom_col(color = "black") +
  geom_text(aes(label = value),
            position = position_stack(vjust = 0.5)) +
  coord_polar(theta = "y") +
  scale_fill_brewer() 

```

## **Theme customization**

The default pie chart styling can be changed in ggplot2 making use of themes.

```{r}
# install.packages("ggplot2")
# library(ggplot2)

ggplot(df_pie2, aes(x = "", y = value, fill = group)) +
  geom_col(color = "black") +
  geom_text(aes(label = value),
            position = position_stack(vjust = 0.5)) +
  coord_polar(theta = "y") +
  scale_fill_brewer() +
  theme_void() 

```

You can get a customized style customizing the `theme` components. Note that you can create your custom theme if you want to reproduce the styling.

```{r}
# install.packages("ggplot2")
# library(ggplot2)

ggplot(df_pie2, aes(x = "", y = value, fill = group)) +
  geom_col(color = "black") +
  geom_text(aes(label = value),
            position = position_stack(vjust = 0.5)) +
  coord_polar(theta = "y") +
  scale_fill_brewer() +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank(),
        panel.grid = element_blank(),
        panel.background = element_rect(fill = "#ebf2ff"),
        plot.background = element_rect(fill = "#ebf2ff"),
        legend.background = element_rect(fill = "#ebf2ff")) 
 
 
 
 
 
 

```

## **Legend customization**

**Legend title**

The default legend title is the name of the categorical variable of the input data frame. Change it following the example below.

**Legend position**

The legend can be placed in several positions with the `legend.position` component of the `theme` function. Possible placement values are `"bottom"`, `"left"`, `"top"` and `"right"` (default).

```{r}
# install.packages("ggplot2")
library(ggplot2)

ggplot(df_pie2, aes(x = "", y = value, fill = group)) +
  geom_col(color = "black") +
  geom_text(aes(label = value),
            position = position_stack(vjust = 0.5)) +
  coord_polar(theta = "y") +
  theme(legend.position = "bottom") 

```

**Remove the legend**

If you prefer removing the legend set the position component to `"none"`.

```{r}
# install.packages("ggplot2")
library(ggplot2)

ggplot(df_pie2, aes(x = "", y = value, fill = group)) +
  geom_col(color = "black") +
  geom_text(aes(label = value),
            position = position_stack(vjust = 0.5)) +
  coord_polar(theta = "y") +
  theme(legend.position = "none") 

```
