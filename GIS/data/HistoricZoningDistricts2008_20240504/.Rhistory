library(ggplot2)
# Calculate average viewCount, likeCount, and commentCount per Yoga Challenge
average_stats <- yoga %>%
group_by(YogaChallenge) %>%
summarise(avg_viewCount = mean(viewCount, na.rm = TRUE),
avg_likeCount = mean(likeCount, na.rm = TRUE),
avg_commentCount = mean(commentCount, na.rm = TRUE))
# Plotting separate bar charts for viewCount, likeCount, and commentCount with average lines
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_viewCount), y = avg_viewCount)) +
geom_bar(stat = "identity", fill = "#78B1E5") +
labs(title = "Average View Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average View Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "viewCount", scales = "free_x") +
scale_y_continuous(labels = scales::comma)
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_likeCount), y = avg_likeCount)) +
geom_bar(stat = "identity", fill = "#00CCBB") +
labs(title = "Average Like Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Like Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "likeCount", scales = "free_x")
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_commentCount), y = avg_commentCount)) +
geom_bar(stat = "identity", fill = "#FFF9D4") +
labs(title = "Average Comment Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Comment Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "commentCount", scales = "free_x")
library(ggplot2)
# Calculate average viewCount, likeCount, and commentCount per Yoga Challenge
average_stats <- yoga %>%
group_by(YogaChallenge) %>%
summarise(avg_viewCount = mean(viewCount, na.rm = TRUE),
avg_likeCount = mean(likeCount, na.rm = TRUE),
avg_commentCount = mean(commentCount, na.rm = TRUE))
# Plotting separate bar charts for viewCount, likeCount, and commentCount with average lines
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_viewCount), y = avg_viewCount)) +
geom_bar(stat = "identity", fill = "#78B1E5") +
labs(title = "Average View Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average View Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "viewCount", scales = "free_x") +
scale_y_continuous(labels = scales::comma)
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_likeCount), y = avg_likeCount)) +
geom_bar(stat = "identity", fill = "#4F5361") +
labs(title = "Average Like Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Like Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "likeCount", scales = "free_x")
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_commentCount), y = avg_commentCount)) +
geom_bar(stat = "identity", fill = "#FFF9D4") +
labs(title = "Average Comment Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Comment Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "commentCount", scales = "free_x")
custom_yoga_theme_pink <- function() {
#theme_minimal() %+replace%
theme(
# Define the overall appearance of the plot
plot.background = element_rect(fill = "#e5babf"),
panel.background = element_rect(fill = "#e5babf"),
panel.grid.major = element_line(color = "#e09592"),
panel.grid.minor = element_blank(),
# Define the appearance of the axes
axis.line = element_line(color = "#b82677"),
axis.text = element_text(color = "#b82677"),
axis.title = element_text(color = "#b82677", size = 12, face = "bold.italic"),
axis.ticks = element_line(color = "#b82677"),
legend.position = "none",
# Define the appearance of the plot title and subtitles
plot.title = element_text(color = "#b82677", size = 14, face = "bold.italic"),
plot.subtitle = element_text(color = "#b82677", size = 12),
# Define the appearance of the plot labels
plot.caption = element_text(color = "#b82677", size = 10),
plot.tag = element_text(color = "#b82677", size = 11, face = "bold.italic"),
# Remove the plot border
panel.border = element_blank()
)
}
library(ggplot2)
# Calculate average viewCount, likeCount, and commentCount per Yoga Challenge
average_stats <- yoga %>%
group_by(YogaChallenge) %>%
summarise(avg_viewCount = mean(viewCount, na.rm = TRUE),
avg_likeCount = mean(likeCount, na.rm = TRUE),
avg_commentCount = mean(commentCount, na.rm = TRUE))
# Plotting separate bar charts for viewCount, likeCount, and commentCount with average lines
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_viewCount), y = avg_viewCount)) +
geom_bar(stat = "identity", fill = "#78B1E5") +
labs(title = "Average View Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average View Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "viewCount", scales = "free_x") +
scale_y_continuous(labels = scales::comma)
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_likeCount), y = avg_likeCount)) +
geom_bar(stat = "identity", fill = "#4F5361") +
labs(title = "Average Like Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Like Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "likeCount", scales = "free_x")
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_commentCount), y = avg_commentCount)) +
geom_bar(stat = "identity", fill = "#FFF9D4") +
labs(title = "Average Comment Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Comment Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "commentCount", scales = "free_x")
custom_yoga_theme_pink <- function() {
#theme_minimal() %+replace%
theme(
# Define the overall appearance of the plot
plot.background = element_rect(fill = "#e5babf"),
panel.background = element_rect(fill = "#e09592"),
panel.grid.major = element_line(color = "#e09592"),
panel.grid.minor = element_blank(),
# Define the appearance of the axes
axis.line = element_line(color = "#b82677"),
axis.text = element_text(color = "#b82677"),
axis.title = element_text(color = "#b82677", size = 12, face = "bold.italic"),
axis.ticks = element_line(color = "#b82677"),
legend.position = "none",
# Define the appearance of the plot title and subtitles
plot.title = element_text(color = "#b82677", size = 14, face = "bold.italic"),
plot.subtitle = element_text(color = "#b82677", size = 12),
# Define the appearance of the plot labels
plot.caption = element_text(color = "#b82677", size = 10),
plot.tag = element_text(color = "#b82677", size = 11, face = "bold.italic"),
# Remove the plot border
panel.border = element_blank()
)
}
library(ggplot2)
# Calculate average viewCount, likeCount, and commentCount per Yoga Challenge
average_stats <- yoga %>%
group_by(YogaChallenge) %>%
summarise(avg_viewCount = mean(viewCount, na.rm = TRUE),
avg_likeCount = mean(likeCount, na.rm = TRUE),
avg_commentCount = mean(commentCount, na.rm = TRUE))
# Plotting separate bar charts for viewCount, likeCount, and commentCount with average lines
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_viewCount), y = avg_viewCount)) +
geom_bar(stat = "identity", fill = "#78B1E5") +
labs(title = "Average View Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average View Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "viewCount", scales = "free_x") +
scale_y_continuous(labels = scales::comma)
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_likeCount), y = avg_likeCount)) +
geom_bar(stat = "identity", fill = "#4F5361") +
labs(title = "Average Like Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Like Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "likeCount", scales = "free_x")
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_commentCount), y = avg_commentCount)) +
geom_bar(stat = "identity", fill = "#FFF9D4") +
labs(title = "Average Comment Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Comment Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "commentCount", scales = "free_x")
library(ggplot2)
# Calculate average viewCount, likeCount, and commentCount per Yoga Challenge
average_stats <- yoga %>%
group_by(YogaChallenge) %>%
summarise(avg_viewCount = mean(viewCount, na.rm = TRUE),
avg_likeCount = mean(likeCount, na.rm = TRUE),
avg_commentCount = mean(commentCount, na.rm = TRUE))
# Plotting separate bar charts for viewCount, likeCount, and commentCount with average lines
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_viewCount), y = avg_viewCount)) +
geom_bar(stat = "identity", fill = "#78B1E5") +
labs(title = "Average View Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average View Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "viewCount", scales = "free_x") +
scale_y_continuous(labels = scales::comma)
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_likeCount), y = avg_likeCount)) +
geom_bar(stat = "identity", fill = "#4F5361") +
labs(title = "Average Like Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Like Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "likeCount", scales = "free_x")
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_commentCount), y = avg_commentCount)) +
geom_bar(stat = "identity", fill = "#FFF9D4") +
labs(title = "Average Comment Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Comment Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "commentCount", scales = "free_x")
custom_yoga_theme_pink <- function() {
#theme_minimal() %+replace%
theme(
# Define the overall appearance of the plot
plot.background = element_rect(fill = "#e5babf"),
panel.background = element_rect(fill = "#e5babf"),
panel.grid.major = element_line(color = "#e09592"),
panel.grid.minor = element_blank(),
# Define the appearance of the axes
axis.line = element_line(color = "#b82677"),
axis.text = element_text(color = "#b82677"),
axis.title = element_text(color = "#b82677", size = 12, face = "bold.italic"),
axis.ticks = element_line(color = "#b82677"),
legend.position = "none",
# Define the appearance of the plot title and subtitles
plot.title = element_text(color = "#b82677", size = 14, face = "bold.italic"),
plot.subtitle = element_text(color = "#b82677", size = 12),
# Define the appearance of the plot labels
plot.caption = element_text(color = "#b82677", size = 10),
plot.tag = element_text(color = "#b82677", size = 11, face = "bold.italic"),
# Remove the plot border
panel.border = element_blank()
)
}
library(ggplot2)
# Calculate average viewCount, likeCount, and commentCount per Yoga Challenge
average_stats <- yoga %>%
group_by(YogaChallenge) %>%
summarise(avg_viewCount = mean(viewCount, na.rm = TRUE),
avg_likeCount = mean(likeCount, na.rm = TRUE),
avg_commentCount = mean(commentCount, na.rm = TRUE))
# Plotting separate bar charts for viewCount, likeCount, and commentCount with average lines
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_viewCount), y = avg_viewCount)) +
geom_bar(stat = "identity", fill = "#78B1E5") +
labs(title = "Average View Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average View Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "viewCount", scales = "free_x") +
scale_y_continuous(labels = scales::comma)
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_likeCount), y = avg_likeCount)) +
geom_bar(stat = "identity", fill = "#4F5361") +
labs(title = "Average Like Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Like Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "likeCount", scales = "free_x")
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_commentCount), y = avg_commentCount)) +
geom_bar(stat = "identity", fill = "#FFF9D4") +
labs(title = "Average Comment Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Comment Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "commentCount", scales = "free_x")
library(ggplot2)
# Calculate average viewCount, likeCount, and commentCount per Yoga Challenge
average_stats <- yoga %>%
group_by(YogaChallenge) %>%
summarise(avg_viewCount = mean(viewCount, na.rm = TRUE),
avg_likeCount = mean(likeCount, na.rm = TRUE),
avg_commentCount = mean(commentCount, na.rm = TRUE))
# Plotting separate bar charts for viewCount, likeCount, and commentCount with average lines
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_viewCount), y = avg_viewCount)) +
geom_bar(stat = "identity", fill = "#78B1E5") +
labs(title = "Average View Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average View Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "viewCount", scales = "free_x") +
scale_y_continuous(labels = scales::comma)
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_likeCount), y = avg_likeCount)) +
geom_bar(stat = "identity", fill = "#4F5361") +
labs(title = "Average Like Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Like Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "likeCount", scales = "free_x")
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_commentCount), y = avg_commentCount)) +
geom_bar(stat = "identity", fill = "#FFF9D4") +
labs(title = "Average Comment Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Comment Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "commentCount", scales = "none")
library(ggplot2)
# Calculate average viewCount, likeCount, and commentCount per Yoga Challenge
average_stats <- yoga %>%
group_by(YogaChallenge) %>%
summarise(avg_viewCount = mean(viewCount, na.rm = TRUE),
avg_likeCount = mean(likeCount, na.rm = TRUE),
avg_commentCount = mean(commentCount, na.rm = TRUE))
# Plotting separate bar charts for viewCount, likeCount, and commentCount with average lines
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_viewCount), y = avg_viewCount)) +
geom_bar(stat = "identity", fill = "#78B1E5") +
labs(title = "Average View Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average View Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "viewCount", scales = "free_x") +
scale_y_continuous(labels = scales::comma)
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_likeCount), y = avg_likeCount)) +
geom_bar(stat = "identity", fill = "#4F5361") +
labs(title = "Average Like Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Like Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "likeCount", scales = "free_x")
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_commentCount), y = avg_commentCount)) +
geom_bar(stat = "identity", fill = "#FFF9D4") +
labs(title = "Average Comment Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Comment Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "commentCount", scales = "free")
library(ggplot2)
# Calculate average viewCount, likeCount, and commentCount per Yoga Challenge
average_stats <- yoga %>%
group_by(YogaChallenge) %>%
summarise(avg_viewCount = mean(viewCount, na.rm = TRUE),
avg_likeCount = mean(likeCount, na.rm = TRUE),
avg_commentCount = mean(commentCount, na.rm = TRUE))
# Plotting separate bar charts for viewCount, likeCount, and commentCount with average lines
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_viewCount), y = avg_viewCount)) +
geom_bar(stat = "identity", fill = "#78B1E5") +
labs(title = "Average View Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average View Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "viewCount", scales = "free_x") +
scale_y_continuous(labels = scales::comma)
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_likeCount), y = avg_likeCount)) +
geom_bar(stat = "identity", fill = "#4F5361") +
labs(title = "Average Like Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Like Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "likeCount", scales = "free_x")
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_commentCount), y = avg_commentCount)) +
geom_bar(stat = "identity", fill = "#FFF9D4") +
labs(title = "Average Comment Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Comment Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "commentCount", scales = "free_y")
library(ggplot2)
# Calculate average viewCount, likeCount, and commentCount per Yoga Challenge
average_stats <- yoga %>%
group_by(YogaChallenge) %>%
summarise(avg_viewCount = mean(viewCount, na.rm = TRUE),
avg_likeCount = mean(likeCount, na.rm = TRUE),
avg_commentCount = mean(commentCount, na.rm = TRUE))
# Plotting separate bar charts for viewCount, likeCount, and commentCount with average lines
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_viewCount), y = avg_viewCount)) +
geom_bar(stat = "identity", fill = "#78B1E5") +
labs(title = "Average View Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average View Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "viewCount", scales = "free_x") +
scale_y_continuous(labels = scales::comma)
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_likeCount), y = avg_likeCount)) +
geom_bar(stat = "identity", fill = "#4F5361") +
labs(title = "Average Like Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Like Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "likeCount", scales = "free_x")
ggplot(average_stats, aes(x = reorder(YogaChallenge, avg_commentCount), y = avg_commentCount)) +
geom_bar(stat = "identity", fill = "#FFF9D4") +
labs(title = "Average Comment Count per Yoga Challenge",
x = "Yoga Challenge",
y = "Average Comment Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
custom_yoga_theme_pink() +
facet_wrap(~ "commentCount", scales = "free_y", labeller = labeller(NULL))
library(dplyr)
top_10_watched <- yoga %>%
arrange(desc(viewCount)) %>%
head(10) %>%
select(viewCount, yogaSubject, YogaChallenge, release_date, duration, videoTitle)
print(top_10_watched)
yoga_challenge_avg_stats <- yoga %>%
filter(viewCount <= 36000000) %>%  # Exclude entries with viewCount greater than 36 million
group_by(YogaChallenge) %>%
summarise(avg_views = mean(viewCount),
avg_likes = mean(likeCount),
avg_comments = mean(commentCount, na.rm = TRUE)) %>%
arrange(desc(avg_views))
print(yoga_challenge_avg_stats)
library(tidyverse)
library(dplyr)
library(knitr)
library(ggplot2)
yoga <- read.csv2("/Users/ulrike_imac_air/projects/DataScienceProjects/youtube_projects/youtube_csv/youtube_yoga_with_kassandra_2024_03_16_V02.csv")
yoga
knitr::opts_chunk$set(echo = TRUE)
packageVersion("ggmap")
register_stadiamaps("7a5e032a-7560-447a-a2c0-ee37752ee90a", write = TRUE)
register_stadiamaps("e004c062-5b48-47b6-a9e7-0232bd555ef9", write = TRUE)
register_stadiamaps(e004c062-5b48-47b6-a9e7-0232bd555ef9, write = TRUE)
register_stadiamaps(API Key: e004c062-5b48-47b6-a9e7-0232bd555ef9, write = TRUE)
register_stadiamaps("API Key: e004c062-5b48-47b6-a9e7-0232bd555ef9", write = TRUE)
packageVersion("stadiamaps")
register_stadiamaps("e004c062-5b48-47b6-a9e7-0232bd555ef9", write = TRUE)
install.packages("stadiamap")
install.packages("stadiamaps")
library(devtools)
devtools::install_github("stadiamaps/ggmap")
register_stadiamaps("e004c062-5b48-47b6-a9e7-0232bd555ef9", write = TRUE)
register_stadiamaps("e004c062-5b48-47b6-a9e7-0232bd555ef9", write = TRUE)
library(devtools)
devtools::install_github("stadiamaps/ggmap")
register_stadiamaps("e004c062-5b48-47b6-a9e7-0232bd555ef9", write = TRUE)
library(ggmap)
library(ggmaps)
library(ggmap)
install.packages("ggmap")
library(ggmap)
knitr::opts_chunk$set(echo = TRUE)
packageVersion("ggmap")
install.packages("ggmap")
library(ggmap)
register_stadiamaps("e004c062-5b48-47b6-a9e7-0232bd555ef9", write = TRUE)
bbox <- c(left = 24.61, bottom = 59.37, right = 24.94, top = 59.5)
get_stadiamap(bbox, zoom = 12, maptype = "stamen_toner_lite") %>% ggmap()
df = data.frame(
lon = c(24.7408933, 24.7456935, 24.745414, 24.7455573, 24.74466, 24.7420517, 24.7406695, 24.7503795, 24.7451665, 24.7480215, 24.7465048, 24.7476525, 24.7461528, 24.745517, 24.7470942, 24.7456197, 24.7468268, 24.7433477, 24.7439016, 24.7456759, 24.7454717, 24.7492029, 24.7538602, 24.7421455, 24.7442811, 24.7499494, 24.7541156, 24.7496663, 24.7407915, 24.749436, 24.7496639, 24.7473202, 24.7500224, 24.7459907, 24.7435694, 24.737213, 24.7411354, 24.7457404, 24.744481, 24.7461543, 24.7498606, 24.7424696, 24.7478131, 24.7427942, 24.7414089, 24.7495252, 24.749662, 24.7457476, 24.7493961, 24.7483363, 24.7508932, 24.7456813, 24.7514706, 24.7467884, 24.7500806, 24.7381424, 24.7385634, 24.7482397, 24.7487323, 24.7515429, 24.7446615, 24.748973, 24.7485532, 24.7468977, 24.7454333, 24.7384107, 24.7487002, 24.7535016, 24.7389838, 24.7453955, 24.7448729, 24.7380715, 24.7503209),
lat = c(59.4358885, 59.4383619, 59.4348787, 59.4307098, 59.4342793, 59.4386533, 59.4362213, 59.4369682, 59.4376537, 59.438031, 59.4370001, 59.4371395, 59.4388086, 59.4401727, 59.4391757, 59.4377618, 59.4367379, 59.4383531, 59.4376105, 59.4353492, 59.4379686, 59.4367582, 59.4338407, 59.43228, 59.435726, 59.4315892, 59.4293218, 59.4366903, 59.4360766, 59.4363518, 59.4375351, 59.4342403, 59.4409327, 59.4321987, 59.4333018, 59.4364968, 59.4384542, 59.4368014, 59.437154, 59.4377442, 59.4386843, 59.4388372, 59.435591, 59.4351632, 59.434102, 59.4359086, 59.4379891, 59.441055, 59.4362933, 59.4404203, 59.4414969, 59.4410772, 59.440026, 59.4367293, 59.4292313, 59.4412534, 59.4371417, 59.4357248, 59.4358888, 59.4353297, 59.4298636, 59.4320464, 59.4321256, 59.4313161, 59.4318567, 59.4440948, 59.4402673, 59.4335765, 59.4413692, 59.4364992, 59.4364868, 59.4425823, 59.4368323)
)
qmplot(lon, lat, data = df, maptype = "stamen_toner_lite", color = I("red"))
bbox_SF <- c(left = -122.11, bottom = 37.37, right = -122.94, top = 37.9)
get_stadiamap(bbox, zoom = 12, maptype = "stamen_toner_lite") %>% ggmap()
bbox_SF <- c(left = -122.11, bottom = 37.37, right = -122.94, top = 37.9)
get_stadiamap(bbox_SF, zoom = 12, maptype = "stamen_toner_lite") %>% ggmap()
# Assuming you've already registered your API key with register_stadiamaps
library(ggmap)  # Load ggmap after registration
bbox_SF <- c(left = -122.11, bottom = 37.37, right = -122.94, top = 37.9)
map <- get_stadiamap(bbox_SF, zoom = 12, maptype = "terrain") %>% ggmap()  # Try a different maptype
# Assuming you've already registered your API key with register_stadiamaps
library(ggmap)  # Load ggmap after registration
bbox_SF <- c(left = -122.11, bottom = 37.37, right = -122.94, top = 37.9)
map <- get_stadiamap(bbox_SF, zoom = 12, maptype = "stamen_toner") %>% ggmap()  # Try a different maptype
# Add additional customizations to the map object (optional)
map + ggtitle("San Francisco")
# Assuming you've already registered your API key with register_stadiamaps
library(ggmap)  # Load ggmap after registration
bbox_SF <- c(left = -122.21, bottom = 37.5, right = -122.94, top = 37.9)
map <- get_stadiamap(bbox_SF, zoom = 12, maptype = "stamen_toner") %>% ggmap()  # Try a different maptype
# Add additional customizations to the map object (optional)
map + ggtitle("San Francisco")
knitr::opts_chunk$set(echo = TRUE)
install.packages("sf")  # Install the sf package for working with spatial data
library(sf)
# Set your working directory to where your shapefile is located
setwd("/Users/ulrike_imac_air/projects/R_themes/GIS/data/HistoricZoningDistricts2008_20240504")
# Load a shapefile using the sf package
shapefile <- st_read("geo_export_5edd6cf5-1c8c-4f91-8036-724d70bd4eae.shp")
# View the structure of the loaded shapefile
print(shapefile)
plot(shapefile)
# View the attributes of the shapefile
head(shapefile)
# View the summary statistics of the shapefile
summary(shapefile)
# Check the structure of the shapefile
str(shapefile)
# Extract the coordinates of the vertices
coordinates <- st_coordinates(shapefile)
# View the first few rows of the coordinates
head(coordinates)
install.packages("raster")
# Load the raster package
library(raster)
# Set your working directory to where your GeoTIFF file is located
setwd("/Users/ulrike_imac_air/projects/R_themes/GIS/data/PlanetDEM_1s_3s_SanFrancisco")
# Read the GeoTIFF file
raster_data <- raster("PlanetDEM_1s_SanFrancisco.tif")
# Print information about the raster
print(raster_data)
# Plot the raster
plot(raster_data)
# Set the filename for the output GeoTIFF
output_filename <- "output_file.tif"
# Write the raster data to a GeoTIFF file
writeRaster(raster_data, filename = output_filename, format = "GTiff", overwrite = TRUE)
