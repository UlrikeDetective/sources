---
title: "Stacked bar chart in ggplot2"
format: html
editor: visual
---

# **Stacked bar chart in ggplot2**

## **Sample data**

The following data represents the answers to the question: "How many hours a day do you spend watching TV?". The variable `x` represents the age of the person, `y` represents their answer and `group` represents their city. This toy data will be used in the examples below.

```{r}
# Data 
set.seed(1)

age <- factor(sample(c("Child", "Adult", "Retired"),
              size = 50, replace = TRUE),
              levels = c("Child", "Adult", "Retired"))
hours <- sample(1:4, size = 50, replace = TRUE)
city <- sample(c("A", "B", "C"),
               size = 50, replace = TRUE)

df <- data.frame(x = age, y = hours, group = city)
df
```

## **Basic stacked bar graph with `geom_bar`**

**stat = "count" (default)**

If you use `geom_bar` with the default arguments you will need to pass only `x` or `y` to the `aes` in addition to the `fill`. The bar plot will display the stacked sum for each group of the variable.

```{r}
# install.packages("ggplot2")
library(ggplot2)

ggplot(df, aes(x = x, fill = group)) + 
  geom_bar() 

```

**stat = "identity"**

Setting `stat = "identity"` you can create a stacked bar plot for multiple variables. In this scenario you can pass other variable to `aes`, representing the value or count of that variable.

```{r}
# install.packages("ggplot2")
library(ggplot2)

ggplot(df, aes(x = x, y = y, fill = group)) + 
  geom_bar(stat = "identity") 

```

## **Bar fill and border colors**

**Predefined palette**

You can change the colors of the stacked bars with a predefined color palette, such as the ones provided by `scale_fill_brewer`.

```{r}
# install.packages("ggplot2")
library(ggplot2)

ggplot(df, aes(x = x, y = y, fill = group)) + 
  geom_bar(stat = "identity") +
  scale_fill_brewer() 

```

**Custom colors**

If you prefer choossing each of the colors you can use `scale_fill_manual` and pass the vector of colors to the `values` argument.

```{r}
# install.packages("ggplot2")
library(ggplot2)

ggplot(df, aes(x = x, y = y, fill = group)) + 
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("#DADAEB", "#9E9AC8", "#6A51A3")) 

```

**Border color (stat = "identity")**

In case you are creating a bar graph with `stat = "identity"` you can add a border color passing a color to the `color` argument of `geom_bar`, but the border will outline all the bars representing the `y` variable.

```{r}
# install.packages("ggplot2")
library(ggplot2)

ggplot(df, aes(x = x, y = y, fill = group)) + 
  geom_bar(stat = "identity", color = "black") +
  scale_fill_manual(values = c("#DADAEB", "#9E9AC8", "#6A51A3")) 

```

## **Legend customization**

**Legend title**

The default legend title of the bar chart corresponds to the name of the variable passed to `fill` and can be overridden with the code below.

```{r}
# install.packages("ggplot2")
library(ggplot2)

ggplot(df, aes(x = x, y = y, fill = group)) + 
  geom_bar(stat = "identity") +
  guides(fill = guide_legend(title = "Title")) 

```

**Legend key labels**

The key legend labels are the names of the categorical variable passed to `fill`. If you need to change these values you can use the `labels` argument of `sacale_fill_discrete` or `scale_fill_manual` if you are changing the fill colors.

```{r}
# install.packages("ggplot2")
library(ggplot2)

ggplot(df, aes(x = x, y = y, fill = group)) + 
  geom_bar(stat = "identity") +
  scale_fill_discrete(labels = c("G1", "G2", "G3")) 

```

**Remove the legend**

The legend can be removed setting the `legend.position` component of the `theme` function to `"none"`. Note that you can also change the position of the legend with this component.

```{r}
# install.packages("ggplot2")
library(ggplot2)

ggplot(df, aes(x = x, y = y, fill = group)) + 
  geom_bar(stat = "identity") +
  theme(legend.position = "none") +
  scale_fill_manual(values = c("#DADAEB", "#9E9AC8", "#6A51A3"))

```

## **Data**

Consider the data of the following table, which shows the count of the values of the variable `x` within three different groups.

```{r}
# Data 
set.seed(1)
x <- sample(1:4, size = 50, replace = TRUE)
g <- sample(c("Group 1", "Group 2", "Group 3"),
            size = 50, replace = TRUE)

# Create a table from your data
tabl <- table(x, g)
tabl 

```

```{r}
barplot(tabl,
        main = "Stacked bar chart",
        sub = "Subtitle",
        xlab = "X-lab",
        ylab = "Y-lab",
        axes = TRUE)
```

**Horizontal bar chart**

If you prefer a horizontal stacked bar chart rather than vertical set `horiz = TRUE`.

```{r}
barplot(tabl,
        horiz = TRUE) 

```

**Custom group names**

The function also allows modifying the names of the groups displayed along the X-axis (Y-axis for horizontal bar plots) with `names.arg` argument.

**Color palette**

If you want to customize the color palette use `col` argument. You will need to specify as many colors as rows your table has. Check the [color palette section](https://r-charts.com/color-palettes/) to choose your palette.

**Border color**

The border color, which defaults to black, can be customized with `border` argument.

```{r}
barplot(tabl,
        names.arg = c("G1", "G2", "G3"),
        col = c("#993404", "#FB6A4A",
                      "#FED976", "#FFFFCC"),
        border = "brown") 

```

**Remove the borders**

If you prefer to remove all the borders set `border = NA`.

```{r}
# Stacked bar plot without border
barplot(tabl, col = c("#993404", "#FB6A4A",
                      "#FED976", "#FFFFCC"),
        border = NA) 

```

### **Adding a legend to the stacked plot**

**Legend customization**

If you want to customize the legend you can pass the arguments of the `legend` function to `args.legend` argument as a list.

```{r}
# Stacked bar plot with legend
barplot(tabl, col = c("#993404", "#FB6A4A",
                      "#FED976", "#FFFFCC"),
        legend.text = rownames(tabl),
        args.legend = list(x = "topleft")) 

```

**Legend outside the bar chart**

You may have noticed that the legend is over the bar chart in our example. If you want to place the legend outside the chart [increase the corresponding margin](https://r-charts.com/base-r/margins/) and fine tune the position of the legend with `inset` as in the following example.

```{r}
# Increase the right margin
par(mar = c(5.1, 4.1, 4.1, 4))

# Stacked bar chart with legend
barplot(tabl,
        col = c("#993404", "#FB6A4A",
                "#FED976", "#FFFFCC"),
        legend.text = rownames(tabl), 
        args.legend = list(x = "topright",
                           inset = c(-0.2, 0)))  
 

```
