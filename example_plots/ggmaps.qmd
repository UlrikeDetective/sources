---
title: "How ggmap works"
format: html
editor: visual
---

## How ggmap works

-   ggmap simplifies the process of downloading base maps from Google or Open Street Maps or Stamen Maps to use in the background of your plots.

-   It also sets the axis scales, etc, in a nice way.

-   Once you have gotten your maps, you make a call with `ggmap()` much as you would with `ggplot()`

-   Let\'s do by example.

### Sisquoctober

-   Here is a small data frame of points from the Sisquoc River.

```{r}
sisquoc <- read.table("data/sisquoc-points.txt", sep = "\t", header = TRUE)
sisquoc
```

-   

    ```         
    # note that ggmap tends to use "lon" instead of "long" for longitude.
    ```

-   `ggmap` typically asks you for a zoom level, but we can try using `ggmap`\'s `make_bbox` function:

```{r}
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sbbox
```

Now, when we grab the map ggmap will try to fit it into that bounding box. Let\'s try:

```{r}
install.packages("ggmap")
```

```{r}
library(ggplot2)
library(ggmap)
```

```{r}
ggmap::register_google(key = "")
# compute the mean lat and lon
ll_means <- sapply(sisquoc[2:3], mean)
sq_map2 <- get_map(location = ll_means,  maptype = "satellite", source = "google", zoom = 15)
#> Map from URL : http://maps.googleapis.com/maps/api/staticmap?center=34.753117,-119.751324&zoom=15&size=640x640&scale=2&maptype=satellite&language=en-EN&sensor=false
ggmap(sq_map2) + 
  geom_point(data = sisquoc, color = "red", size = 4) +
  geom_text(data = sisquoc, aes(label = paste("  ", as.character(name), sep="")), angle = 60, hjust = 0, color = "yellow")

```

```{r}
sq_map3 <- get_map(location = ll_means,  maptype = "terrain", source = "google", zoom = 15)
#> Map from URL : http://maps.googleapis.com/maps/api/staticmap?center=34.753117,-119.751324&zoom=15&size=640x640&scale=2&maptype=terrain&language=en-EN&sensor=false
ggmap(sq_map3) + 
  geom_point(data = sisquoc, color = "red", size = 4) +
  geom_text(data = sisquoc, aes(label = paste("  ", as.character(name), sep="")), angle = 60, hjust = 0, color = "yellow")
```

### How about a bike ride?

-   I was riding my bike one day with a my phone and downloaded the GPS readings at short intervals.

-   We can plot the route like this:

    ```{r}
    bike <- read.csv("/data/bike-ride.csv")
    head(bike)

    ```

```{r}
bikemap1 <- get_map(location = c(-122.080954, 36.971709), maptype = "terrain", source = "google", zoom = 13)
#> Map from URL : http://maps.googleapis.com/maps/api/staticmap?center=36.971709,-122.080954&zoom=14&size=640x640&scale=2&maptype=terrain&language=en-EN&sensor=false
ggmap(bikemap1) + 
  geom_path(data = bike, aes(color = elevation), size = 3, lineend = "round") + 
  scale_color_gradientn(colours = rainbow(7), breaks = seq(25, 200, by = 25))
```

-   See how we have mapped elevation to the color of the path using our rainbow colors again.

-   Note that getting the right zoom and position for the map is sort of trial and error. You can go to google maps to figure out where the center should be (right click and choose \"What\'s here?\" to get the lat-long of any point. )

-   The `make_bbox` function has never really worked for me.

### Fish sampling locations

For this, I have whittled down some stuff in the coded wire tag data base to georeferenced marine locations in British Columbia where at least one Chinook salmon was recovered in between 2000 and 2012 inclusive. To see how I did all that you can check out [this](https://github.com/eriqande/pbt-feasibility/blob/4ea2fc960f74f66b5ec3a11c107cdc52bfb346dc/Rmd/02-02-explore-recovery-and-catch-sample-data.Rmd#looking-at-locations-of-location-codes)

Let\'s have a look at the data:

```{r}
bc <- readRDS("/data/bc_sites.rds")
bc
```

So, we have 1,113 points to play with.

#### What do we hope to learn?

-   These locations in BC are hierarchically structured. I am basically interested in how close together sites in the same \"region\" or \"area\" or \"sector\" are, and pondering whether it is OK to aggregate fish recoveries at a certain level for the purposes of getting a better overall estimate of the proportion of fish from different hatcheries in these areas.

-   So, pretty simple stuff. I just want to plot these points on a map, and paint them a different color according to their sector, region, area, etc.

-   Let\'s just enumerate things first, using `dplyr`:

    ```{r}
    library(dplyr)

    bc_counts <- bc %>%
      group_by(sector, region, area) %>%
      tally()

    # View the resulting counts
    print(bc_counts)

    ```

```{=html}
<!-- -->
```
-   That looks good. It appears like we could probably color code over the whole area down to region, and then down to area within subregions.

#### Makin\' a map.

-   Let us try again to use `make_bbox()` to see if it will work better when used on a large scale.

```         
# compute the bounding box
```

```{r}
bc_bbox <- make_bbox(lat = latitude, lon = longitude, data = bc)
bc_bbox
```

```{r}
# grab the maps from google
bc_big <- get_map(location = bc_bbox, source = "google", maptype = "terrain")
#> Warning: bounding box given to google - spatial extent only approximate.
#> converting bounding box to center/zoom specification. (experimental)
#> Map from URL : http://maps.googleapis.com/maps/api/staticmap?center=51.86665,-127.98475&zoom=6&size=640x640&scale=2&maptype=terrain&language=en-EN&sensor=false

# plot the points and color them by sector
ggmap(bc_big) + 
  geom_point(data = bc, mapping = aes(x = longitude, y = latitude, color = sector))
```

-   Cool! That was about as easy as could be. North is in the north, south is in the south, and the three reddish points are clearly aberrant ones at the mouths of rivers.

#### Coloring it by region

-   We should be able to color these all by region to some extent (it might get overwhelming), but let us have a go with it.

-   Notice that region names are unique overall (not just within N or S) so we can just color by region name.

    ```{r}
    ggmap(bc_big) + 
      geom_point(data = bc, mapping = aes(x = longitude, y = latitude, color = region))
    ```

#### Zooming in on each region and coloring by area

-   It is time to really put this thing through its paces. (Keeping in mind that `make_bbox()` might fail...)

-   I want to make series of maps. One for each region, in which the the areas in that region are colored differently.

-   How? Let\'s make a function: you pass it the region and it makes the plot.

-   Keep in mind that there are no factors in this data frame so we don\'t have to worry about dropping levels, etc.

    ```{r}
    region_plot <- function(MyRegion) {
      tmp <- bc %>% filter(region == MyRegion)
      bbox <- make_bbox(lon = longitude, lat = latitude, data = tmp)
      mymap <- get_map(location = bbox, source = "google", maptype = "terrain")
      # now we want to count up how many areas there are
      NumAreas <- tmp %>% summarise(n_distinct(area))
      NumPoints <- nrow(tmp)
      
      the_map <- ggmap(mymap) +
        geom_point(data = tmp, mapping = aes(x = longitude, y = latitude), size = 4, color = "black") +
        geom_point(data = tmp, mapping = aes(x = longitude, y = latitude, color = area), size = 3) +
        ggtitle(
          paste("BC Region: ", MyRegion, " with ", NumPoints, " locations in ", NumAreas, " area(s)", sep = "")
          )

      ggsave(paste("bc_region", MyRegion, ".pdf", sep = ""), the_map, width = 9, height = 9)
    }
    ```

So, with that function we just need to cycle over the regions and make all those plots.

Note that I am saving them to PDFs because it is no fun to make a web page with all of those in there.
